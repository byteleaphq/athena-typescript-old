openapi: 3.0.0
info:
  title: Athena-Backend external
  version: 1.0.0
servers:
  - url: https://backend.athenacopilot.ai
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    Brain:
      type: object
      properties:
        active_features:
          type: object
          nullable: true
          description: Active features of the brain. Currently used internally
        brain_id:
          type: string
          description: Unique identifier for the brain
        created_on:
          type: number
          description: Timestamp when the brain was created
        description:
          type: string
          description: Description of the brain
        document_count:
          type: integer
          description: Number of documents in the brain
        id:
          type: string
          description: Unique identifier for the brain (same as brain_id)
        language_code:
          type: string
          description: Language code of the brain
        metadata_schema:
          type: object
          nullable: true
          description: Metadata schema for the brain
        org_uuid:
          type: string
          description: Unique identifier for the organization
        storage_bytes:
          type: integer
          description: Total storage size of the brain in bytes
        supp_id:
          type: string
          description: Supplementary identifier for the brain
        title:
          type: string
          description: Title or name of the brain
        type:
          type: string
          description: Type of the brain (e.g., unstructured, structured)
        updated_on:
          type: number
          description: Timestamp when the brain was last updated
    Document:
      type: object
      properties:
        chunk_header:
          type: string
          nullable: true
          description: The header or context information for the document chunk.
        content:
          type: string
          nullable: true
          description: The content or text of the document chunk.
        created_on:
          type: integer
          description: The Unix timestamp representing the creation time of the document.
        description:
          type: string
          nullable: true
          description: The description or summary of the document.
        document_type:
          type: string
          description: The type of the document (e.g., raw_text, file, url).
        file_extension:
          type: string
          nullable: true
          description: The file extension of the document (if applicable).
        file_name:
          type: string
          nullable: true
          description: The name of the file for the document (if applicable).
        id:
          type: string
          description: The unique identifier of the document.
        knowledge_base_id:
          type: string
          description: The identifier of the knowledge base to which the document belongs.
        link_to_source:
          type: string
          nullable: true
          description: The URL or link to the source of the document (if applicable).
        supp_id:
          type: string
          nullable: true
          description: The supplementary identifier of the document (if applicable).
        title:
          type: string
          nullable: true
          description: The title of the document.
        url:
          type: string
          nullable: true
          description: The URL of the document (if applicable).
        vectorization_status:
          type: string
          description: The status of the document vectorization process.
        total_chunks:
          type: integer
          nullable: true
          description: The total number of chunks the document is divided into.
    Chat:
      type: object
      properties:
        brain_id:
          type: string
          nullable: true
          description: The ID of the brain associated with the chat
        chat_id:
          type: string
          description: The unique identifier of the chat
        created_at:
          type: string
          description: The timestamp when the chat was created
        id:
          type: integer
          description: The unique identifier of the chat record
        last_updated:
          type: string
          nullable: true
          description: The timestamp when the chat was last updated
        model:
          type: string
          description: The name of the model used for the chat
        recent_chat_history:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              model_response:
                type: object
                properties:
                  content:
                    type: string
                  timestamp:
                    type: integer
              user_input:
                type: object
                properties:
                  content:
                    type: string
                  timestamp:
                    type: integer
          description: The metadata related to the chat interactions
        system_message:
          type: string
          nullable: true
          description: The system message or prompt for the chat
        temperature:
          type: number
          nullable: true
          description: The temperature value used for the model
        title:
          type: string
          description: The title or name of the chat
        user_id:
          type: string
          description: The ID of the user associated with the chat
        default_options:
          nullable: true
          type: object
          additionalProperties: true
          properties:
            auto_query_guidance:
              type: string
              nullable: true
            knowledge_base_ids:
              type: array
              nullable: true
              items:
                type: string
            model:
              type: string
              nullable: true
          description: The default options for the chat
    ChatInteraction:
      type: object
      properties:
        actor:
          type: string
          description: The actor (USER or AI) of the interaction
        created_at:
          type: string
          description: The timestamp when the interaction was created
        dw_data:
          type: object
          nullable: true
          description: The data related to the data warehouse integration
        id:
          type: integer
          description: The unique identifier of the interaction
        message:
          type: string
          description: The message content of the interaction
        metadata:
          type: object
          nullable: true
          description: The metadata associated with the interaction
        model:
          type: string
          nullable: true
          description: The name of the model used for the interaction
        reference:
          type: array
          nullable: true
          items:
            oneOf:
              - $ref: "#/components/schemas/Document"
              - type: object
          description: The list of references associated with the interaction
        thread_id:
          type: string
          description: The ID of the chat thread associated with the interaction
        timestamp:
          type: string
          description: The timestamp when the interaction occurred
        user_credits:
          type: integer
          nullable: true
          description: The number of credits used by the user for the interaction
    ChatbotResponse:
      type: object
      properties:
        api_key:
          type: string
          example: 83816958-931c-42c0-9a21-c6f61c7cdcdb
          description: The API key for the chatbot
          nullable: true
        brain_id:
          type: string
          example: 37d53982-bf08-4058-88d5-f91df0a7ab41
          description: The ID of the brain associated with the chatbot
        created_at:
          type: string
          example: "2024-02-18T19:00:11.989503+00:00"
          description: The creation timestamp of the chatbot
        id:
          type: string
          example: 7a2e792d-cf48-49d2-a36d-186be034a9dc
          description: The ID of the chatbot
        name:
          type: string
          example: Chatbot -1
          description: The name of the chatbot
        urls:
          type: array
          nullable: true
          items:
            type: string
          example:
            - https://byteleap.co
            - https://ayushgoyal.dev
          description: An array of URLs associated with the chatbot
        user_id:
          type: string
          example: a7a690e6-2a83-4ec5-8eb2-73b0c1d0aa9c
          description: The ID of the user who owns the chatbot
    ChatbotAnalytics:
      type: object
      properties:
        number_of_chats:
          type: integer
          example: 1
          description: The number of chats the chatbot has participated in
        number_of_messages:
          type: integer
          example: 2
          description: The total number of messages the chatbot has exchanged
    ChatbotMessages:
      type: object
      properties:
        chat_messages:
          type: array
          items:
            type: object
            properties:
              actor:
                type: string
                example: USER
                description: The actor of the message, either USER or AI
              created_at:
                type: string
                example: "2024-05-20T06:46:09.010233+00:00"
                description: The timestamp when the message was created
              id:
                type: integer
                example: 461
                description: The ID of the message
              message:
                type: string
                example: hi
                description: The content of the message
              reference:
                type: array
                nullable: true
                items:
                  oneOf:
                    - $ref: "#/components/schemas/Document"
                    - type: object
                description: The list of references associated with the interaction
              thread_id:
                type: string
                example: 7c621be0-96d8-4ecc-9149-74d0ff94f106
                description: The ID of the thread the message belongs to
              timestamp:
                type: string
                nullable: true
                example: null
                description: The timestamp of the message, if available
    DeleteResponse:
      type: object
      properties:
        message:
          type: string
          example: Document deleted successfully.
          description: A message indicating the result of the delete operation
security:
  - basicAuth: []
tags:
  - name: Brain
  - name: Document
  - name: Chat
  - name: Chatbot
  - name: Integration
  - name: ogranisation
paths:
  /brain/:
    post:
      tags:
        - Brain
      summary: Create Brain
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Test - brain
                  description: Name of the brain
              required:
                - name
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "395"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Sun, 19 May 2024 16:43:02 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Brain"
              example:
                active_features: null
                brain_id: 55e94ce1-343c-43d9-b48b-2556277eb8db
                created_on: 1716136982.557583
                description: ""
                document_count: 0
                id: 55e94ce1-343c-43d9-b48b-2556277eb8db
                language_code: en
                metadata_schema: null
                org_uuid: 3bef451d-5bbd-4a6e-b504-6c491c3889fe
                storage_bytes: 0
                supp_id: ""
                title: Test - brain
                type: unstructured
                updated_on: 1716136982.564879
        "401":
          description: Unauthorized
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "28"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Mon, 20 May 2024 07:31:06 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                type: object
              example:
                msg: Token has expired
        "500":
          description: Internal Server Error
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "128"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Mon, 20 May 2024 07:31:44 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                type: object
              example:
                error: >-
                  Error creating brain: 400 Bad Request: The browser (or proxy)
                  sent a request that this server could not understand.
    get:
      tags:
        - Brain
      summary: Get All Brains
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "768"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Sun, 19 May 2024 16:48:32 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Brain"
              example:
                - active_features: null
                  brain_id: 1f1d7a6a-e45b-4974-a0ba-98935650cb9c
                  created_on: 1716137128.912637
                  description: ""
                  document_count: 0
                  id: 1f1d7a6a-e45b-4974-a0ba-98935650cb9c
                  language_code: en
                  metadata_schema: null
                  org_uuid: 3bef451d-5bbd-4a6e-b504-6c491c3889fe
                  storage_bytes: 0
                  supp_id: ""
                  title: Test Updated Brain
                  type: unstructured
                  updated_on: 1716137146
                - active_features: null
                  brain_id: 2b7cf406-640e-4344-b239-7c9ad2b08757
                  created_on: 1716137308.461201
                  description: ""
                  document_count: 0
                  id: 2b7cf406-640e-4344-b239-7c9ad2b08757
                  language_code: en
                  metadata_schema: null
                  org_uuid: 3bef451d-5bbd-4a6e-b504-6c491c3889fe
                  storage_bytes: 0
                  supp_id: ""
                  title: Test - brain
                  type: unstructured
                  updated_on: 1716137308
  /brain/{brain_id}:
    put:
      tags:
        - Brain
      summary: Update Brain
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Test Updated Brain
                  description: Updated name of the brain
              required:
                - name
              example:
                name: Test Updated Brain
      parameters:
        - name: brain_id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "386"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Sun, 19 May 2024 16:45:46 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Brain"
              example:
                active_features: null
                brain_id: 1f1d7a6a-e45b-4974-a0ba-98935650cb9c
                created_on: 1716137128.912637
                description: ""
                document_count: 0
                id: 1f1d7a6a-e45b-4974-a0ba-98935650cb9c
                language_code: en
                metadata_schema: null
                org_uuid: 3bef451d-5bbd-4a6e-b504-6c491c3889fe
                storage_bytes: 0
                supp_id: ""
                title: Test Updated Brain
                type: unstructured
                updated_on: 1716137146
        "500":
          description: Internal Server Error
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "979"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Mon, 20 May 2024 07:32:05 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                type: object
              example:
                error: "Error updating knowledge base:"
    get:
      tags:
        - Brain
      summary: Get Brain by ID
      parameters:
        - name: brain_id
          in: path
          schema:
            type: string
          required: true
          example: "{{brain_id}}"
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "386"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Sun, 19 May 2024 16:46:45 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Brain"
              example:
                active_features: null
                brain_id: 1f1d7a6a-e45b-4974-a0ba-98935650cb9c
                created_on: 1716137128.912637
                description: ""
                document_count: 0
                id: 1f1d7a6a-e45b-4974-a0ba-98935650cb9c
                language_code: en
                metadata_schema: null
                org_uuid: 3bef451d-5bbd-4a6e-b504-6c491c3889fe
                storage_bytes: 0
                supp_id: ""
                title: Test Updated Brain
                type: unstructured
                updated_on: 1716137146
        "404":
          description: Not Found
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "38"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Sun, 19 May 2024 16:47:07 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                type: object
              example:
                error: Knowledge base not found.
    delete:
      tags:
        - Brain
      summary: Delete Brain
      parameters:
        - name: brain_id
          in: path
          schema:
            type: string
          required: true
          example: "{{brain_id}}"
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "38"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Sun, 19 May 2024 16:43:30 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
              example:
                message: Knowledge base deleted.
  /document/{brain_id}/text:
    post:
      tags:
        - Document
      summary: Create Text Document
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Text that is to be added to the brain
              example:
                content: >-
                  What is an operating system? An operating system (OS) is the
                  program that, after being initially loaded into the computer
                  by a boot program, manages all of the other application
                  programs in a computer............
      parameters:
        - name: brain_id
          in: path
          schema:
            type: string
          required: true
          example: "{{brain_id}}"
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.12.2
            Date:
              schema:
                type: string
                example: Sun, 12 May 2024 18:53:56 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "2227"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
              example:
                chunk_header: null
                content: >-
                  What is an operating system? An operating system (OS) is the
                  program that, after being initially loaded into the computer
                  by a boot program, manages all of the other application
                  programs in a computer............
                created_on: 1715540036
                description: ""
                document_type: raw_text
                file_extension: .txt
                file_name: null
                id: 0a7b731a-1aaf-4255-b047-12ebfd446f3c
                knowledge_base_id: 930388ef-da14-46fb-9c63-0fc7364fa0e5
                link_to_source: null
                supp_id: ""
                title: null
                vectorization_status: PENDING
  /document/{brain_id}/url:
    post:
      tags:
        - Document
      summary: Create Document by URL
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: Url of the website that you want to add
              example:
                url: https://en.wikipedia.org/wiki/Artificial_intelligence
      parameters:
        - name: brain_id
          in: path
          schema:
            type: string
          required: true
          example: "{{brain_id}}"
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "360"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Sun, 19 May 2024 16:49:48 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
              example:
                chunk_header: null
                created_on: 1716137387
                description: null
                document_type: url
                file_name: null
                id: 1e76fdda-dc07-45f0-a0f9-339148d3ae06
                knowledge_base_id: 1f1d7a6a-e45b-4974-a0ba-98935650cb9c
                link_to_source: https://en.wikipedia.org/wiki/Artificial_intelligence
                supp_id: null
                title: null
                vectorization_status: URL_SUBMITTED_FOR_SCRAPING
        "500":
          description: Internal Server Error
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "81"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Sun, 19 May 2024 16:50:11 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                type: object
              example:
                error: >-
                  Error creating document: ({'message': 'Invalid url
                  provided.'}, 400)
  /document/{brain_id}/{document_id}/download:
    get:
      tags:
        - Document
      summary: Download
      parameters:
        - name: brain_id
          in: path
          schema:
            type: string
          required: true
          example: "{{brain_id}}"
        - name: document_id
          in: path
          schema:
            type: string
          required: true
          example: a00f07cb-c04c-4824-9b26-5b7eb5c274ae
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.12.2
            Date:
              schema:
                type: string
                example: Sun, 12 May 2024 18:58:06 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "428"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: >-
                      The URL to download the document file. This URL is a
                      pre-signed URL that provides temporary access to the
                      document file hosted on a cloud storage service.
              example:
                url: >-
                  https://8d14e75b78613596eb36d95900f46a4e.r2.cloudflarestorage.com/athena/e41bfe56cc6141f0af74a497d18500ec-ReactJSNotesForProfessionals.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=8e591b165b9623eef5270c5e16393d0b%2F20240512%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20240512T185806Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=56d79bafb1a7102ffaf3820bd505efd78ebd2babe57e96cde7155900a7c43822
  /document/{brain_id}:
    get:
      tags:
        - Document
      summary: List Documents
      parameters:
        - name: brain_id
          in: path
          schema:
            type: string
          required: true
          example: "{{brain_id}}"
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.9.18
            Date:
              schema:
                type: string
                example: Fri, 05 Jan 2024 20:42:32 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "729"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
              example:
                - chunk_header: null
                  created_on: 1704486923
                  description: ""
                  document_type: raw_text
                  file_extension: .txt
                  file_name: null
                  id: 7faedb64-7638-457e-bed2-0d6e12679d37
                  knowledge_base_id: b3c59c24-23a8-451d-8755-44d702f4953f
                  link_to_source: null
                  supp_id: ""
                  title: null
                  total_chunks: 2
                  vectorization_status: COMPLETE
                - chunk_header: null
                  created_on: 1704487076
                  description: null
                  document_type: file
                  file_name: r2.byteleap.co__brochure.pdf
                  id: 8c8b0340-4c9b-492b-9e5b-22c9ca5ab16c
                  knowledge_base_id: b3c59c24-23a8-451d-8755-44d702f4953f
                  link_to_source: https://r2.byteleap.co/brochure.pdf
                  supp_id: null
                  title: r2.byteleap.co__brochure.pdf
                  total_chunks: 5
                  vectorization_status: COMPLETE
  /document/{brain_id}/{document_id}:
    get:
      tags:
        - Document
      summary: Get Document
      parameters:
        - name: brain_id
          in: path
          schema:
            type: string
          required: true
          example: "{{brain_id}}"
        - name: document_id
          in: path
          schema:
            type: string
          required: true
          example: 020d69cb-197b-47ef-911b-ee45ee260839
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.12.2
            Date:
              schema:
                type: string
                example: Sun, 12 May 2024 18:58:43 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "922"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
              examples:
                example-0:
                  summary: Get Document
                  value:
                    chunk_header: null
                    content: ""
                    created_on: 1715540224
                    description: null
                    document_type: file
                    file_name: >-
                      e41bfe56cc6141f0af74a497d18500ec-ReactJSNotesForProfessionals.pdf
                    id: a00f07cb-c04c-4824-9b26-5b7eb5c274ae
                    knowledge_base_id: 930388ef-da14-46fb-9c63-0fc7364fa0e5
                    link_to_source: null
                    supp_id: null
                    title: >-
                      e41bfe56cc6141f0af74a497d18500ec-ReactJSNotesForProfessionals.pdf
                    url: >-
                      https://8d14e75b78613596eb36d95900f46a4e.r2.cloudflarestorage.com/athena/e41bfe56cc6141f0af74a497d18500ec-ReactJSNotesForProfessionals.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=8e591b165b9623eef5270c5e16393d0b%2F20240512%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20240512T185843Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=f4a8ba86a47cd57f385d81028c9245e84354d59865340f3133eb4c2a40468c02
                    vectorization_status: FILE_UPLOAD_URL_REQUESTED
                example-1:
                  summary: Get Document
                  value:
                    chunk_header: >-
                      Document context: the following excerpt is from
                      e41bfe56cc6141f0af74a497d18500ec-ReactJSNotesForProfessionals.pdf.
                      This document is about the use of props in React, which
                      are used to pass data and methods from a parent component
                      to a child component, allowing for the creation of
                      reusable components.
                    content: >-
                      React JS

                      Notes for ProfessionalsReact JS

                      Notes for Professionals

                      GoalKicker.com

                      Free Programming BooksDisclaimer

                      This is an unocial free book created for educational
                      purposes and is

                      not aliated with ocial React JS group(s) or company(s).

                      All trademarks and registered trademarks are

                      the property of their respective owners

                      100+ pages

                      of professional hints and tricksContents

                      About....(concatenated)
                    created_on: 1715540224
                    description: null
                    document_type: file
                    file_name: >-
                      e41bfe56cc6141f0af74a497d18500ec-ReactJSNotesForProfessionals.pdf
                    id: a00f07cb-c04c-4824-9b26-5b7eb5c274ae
                    knowledge_base_id: 930388ef-da14-46fb-9c63-0fc7364fa0e5
                    link_to_source: null
                    supp_id: null
                    title: >-
                      e41bfe56cc6141f0af74a497d18500ec-ReactJSNotesForProfessionals.pdf
                    total_chunks: 230
                    url: >-
                      https://8d14e75b78613596eb36d95900f46a4e.r2.cloudflarestorage.com/athena/e41bfe56cc6141f0af74a497d18500ec-ReactJSNotesForProfessionals.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=8e591b165b9623eef5270c5e16393d0b%2F20240512%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20240512T191055Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=de9f92cfd938fd2c9d07da5e152e238f2d5b5501886ac0aa49a7c2eb69254e61
                    vectorization_status: COMPLETE
    delete:
      tags:
        - Document
      summary: Delete Document
      parameters:
        - name: brain_id
          in: path
          schema:
            type: string
          required: true
          example: "{{brain_id}}"
        - name: document_id
          in: path
          schema:
            type: string
          required: true
          example: 5ca417c0-6d74-4752-a9cd-e2813ea67fd6
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.12.2
            Date:
              schema:
                type: string
                example: Sun, 12 May 2024 19:12:01 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "50"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
              example:
                message: Document deleted successfully.
  /document/{brain_id}/file:
    post:
      tags:
        - Document
      summary: Upload Document
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      parameters:
        - name: brain_id
          in: path
          schema:
            type: string
          required: true
          example: "{{brain_id}}"
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.12.2
            Date:
              schema:
                type: string
                example: Sun, 12 May 2024 19:17:13 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "480"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
              example:
                chunk_header: null
                created_on: 1715541427
                description: null
                document_type: file
                file_name: >-
                  281bea3c865b452795a710a64890c581-ReactJSNotesForProfessionals.pdf
                id: 5ca417c0-6d74-4752-a9cd-e2813ea67fd6
                knowledge_base_id: 930388ef-da14-46fb-9c63-0fc7364fa0e5
                link_to_source: null
                supp_id: null
                title: >-
                  281bea3c865b452795a710a64890c581-ReactJSNotesForProfessionals.pdf
                vectorization_status: FILE_UPLOAD_URL_REQUESTED
  /chat/:
    post:
      tags:
        - Chat
      summary: Create New Chat
      description: >-
        integration - defaults to files (superpowered). supported values - files
        | data-warehouse
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                brain_id:
                  type: string
                  description: The ID of the brain to associate with the chat
                name:
                  type: string
                  example: Test_chat2
                  description: The name of the chat
                integration:
                  type: string
                  example: files
                  description: The integration to use for the chat
                  enum:
                    - files
                    - data-warehouse
              required:
                - brain_id
                - name
              example:
                brain_id: "{{brain_id}}"
                name: Test_chat2
                integration: files
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.12.2
            Date:
              schema:
                type: string
                example: Sun, 12 May 2024 18:29:16 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "396"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chat"
              examples:
                example-0:
                  summary: Create New Chat (with sp)
                  value:
                    brain_id: 2ad136c5-d2a2-4bbc-bc3d-974f9f88e86d
                    chat_id: 8474f310-a2a9-4cf8-b16f-8d01a5a6b5fa
                    created_at: Sun, 12 May 2024 18:29:16 GMT
                    id: 418
                    last_updated: Sun, 12 May 2024 18:29:16 GMT
                    model: gpt-3.5-turbo
                    sp_metadata: {}
                    system_message: ""
                    temperature: null
                    title: Test_chat
                    user_id: 6cc35c0a-5095-4677-ac22-843a68138f53
                example-1:
                  summary: Create New Chat (with buster)
                  value:
                    brain_id: 2ad136c5-d2a2-4bbc-bc3d-974f9f88e86d
                    chat_id: 80624c87-daec-42f5-a320-6d3ff5f4ae16
                    created_at: Sun, 12 May 2024 18:30:53 GMT
                    id: 419
                    last_updated: Sun, 12 May 2024 18:30:53 GMT
                    model: data-warehouse
                    sp_metadata: N/A
                    system_message: ""
                    temperature: 0
                    title: Test_chat
                    user_id: 6cc35c0a-5095-4677-ac22-843a68138f53
    get:
      tags:
        - Chat
      summary: List Chats
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "717"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Mon, 20 May 2024 06:06:05 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Chat"
              example:
                - brain_id: 1f1d7a6a-e45b-4974-a0ba-98935650cb9c
                  chat_id: 94dccfdf-c401-417c-bfcf-07f37f78e2da
                  created_at: Mon, 20 May 2024 06:05:49 GMT
                  default_options: null
                  id: 421
                  last_updated: Mon, 20 May 2024 06:05:49 GMT
                  model: gpt-3.5-turbo
                  system_message: ""
                  temperature: 0
                  title: Test_chat2
                  user_id: abe8352f-52ad-4ce0-a34b-c48cdf8a61aa
                - brain_id: 1f1d7a6a-e45b-4974-a0ba-98935650cb9c
                  chat_id: 0216e0f5-141e-4a53-9a41-9a2c3dc635d9
                  created_at: Mon, 20 May 2024 06:05:40 GMT
                  default_options: null
                  id: 420
                  last_updated: Mon, 20 May 2024 06:05:40 GMT
                  model: gpt-3.5-turbo
                  system_message: ""
                  temperature: 0
                  title: Test_chat
                  user_id: abe8352f-52ad-4ce0-a34b-c48cdf8a61aa
  /chat/{chat_id}:
    get:
      tags:
        - Chat
      summary: Get Chat
      parameters:
        - name: chat_id
          in: path
          schema:
            type: string
          required: true
          example: "{{chat_id}}"
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.9.18
            Date:
              schema:
                type: string
                example: Sat, 06 Jan 2024 13:41:14 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "393"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chat"
              example:
                created_on: 1704488059
                default_options:
                  auto_query_guidance: ""
                  knowledge_base_ids:
                    - b3c59c24-23a8-451d-8755-44d702f4953f
                  model: gpt-3.5-turbo
                  response_length: medium
                  segment_length: medium
                  system_message: null
                  temperature: 0
                  use_rse: true
                id: eaabf727-c965-4371-b149-3e5b2b207827
                num_interactions: 0
                recent_chat_history: []
                supp_id: ""
                title: Test Chat Thread
    put:
      tags:
        - Chat
      summary: Update Chat
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              properties:
                temperature:
                  type: number
                  description: between 1 and 0
                  nullable: true
                name:
                  type: string
                  example: Test_chat2
                  description: The updated name of the chat
                  nullable: true
                system_message:
                  type: string
                  nullable: true
              example:
                temperature: null
                system_message: test system message
      parameters:
        - name: chat_id
          in: path
          schema:
            type: string
          required: true
          example: "{{chat_id}}"
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "769"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Sat, 30 Mar 2024 05:52:55 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Chat"
              example:
                - brain_id: null
                  chat_id: 18083f81-d93e-4f98-a377-d1e8af8d40f3
                  created_at: "2024-02-26T06:58:34.095147+00:00"
                  id: 209
                  last_updated: "2024-03-12T07:47:37.206612+00:00"
                  model: gpt-3.5-turbo
                  sp_metadata:
                    - id: "0000000001"
                      model_response:
                        content: >-
                          Hello! I'm just a computer program, so I don't have
                          feelings, but I'm here and ready to assist you. How
                          can I help you today?
                        timestamp: 1708930733
                      user_input:
                        content: Hello! How're you doing?
                        timestamp: 1708930731
                    - id: "0000000002"
                      model_response:
                        content: Hello again! How can I assist you today?
                        timestamp: 1710229655
                      user_input:
                        content: heyy!!
                        timestamp: 1710229653
                  system_message: ""
                  temperature: null
                  title: Heyy!!!
                  user_id: a7a690e6-2a83-4ec5-8eb2-73b0c1d0aa9c
    delete:
      tags:
        - Chat
      summary: Delete Chat
      parameters:
        - name: chat_id
          in: path
          schema:
            type: string
          required: true
          example: 8474f310-a2a9-4cf8-b16f-8d01a5a6b5fa
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.12.2
            Date:
              schema:
                type: string
                example: Sun, 12 May 2024 18:29:40 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "40"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
              example:
                message: Chat thread deleted.
  /chat/new-chat:
    post:
      tags:
        - Chat
      summary: Create New Chat
      description: Create a new chat with the specified brain and message.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                brain_ids:
                  type: array
                  items:
                    type: string
                  description: The IDs of the brains to associate with the chat
                name:
                  type: string
                  example: Slack Chat - 2024-06-26T12:34:56.789Z
                  description: The name of the chat
                message:
                  type: string
                  description: The initial message to start the chat
              required:
                - brain_ids
                - name
                - message
              example:
                brain_ids: ["2ad136c5-d2a2-4bbc-bc3d-974f9f88e86d"]
                name: Slack Chat - 2024-06-26T12:34:56.789Z
                message: Hello, how can I assist you today?
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: string
                example: Werkzeug/3.0.1 Python/3.12.2
            Date:
              schema:
                type: string
                example: Sun, 12 May 2024 18:29:16 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: string
                example: "396"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatInteraction"
              example:
                    - actor: AI
                      created_at: Wed, 26 Jun 2024 08:00:02 GMT
                      id: 2352
                      message: Hello! I'm here to help. What do you need assistance with today?
                      metadata: {}
                      model: gpt-3.5-turbo
                      reference: []
                      thread_id: 94760619-6fbb-4f1e-919e-bd7c579fdfd3
                      timestamp: Wed, 26 Jun 2024 08:00:02 GMT
                      user_credits: 997


  /chat/get-response:
    post:
      tags:
        - Chat
      summary: Get Response
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_thread_id:
                  type: string
                  description: Id of chat to which you want to send message
                text:
                  type: string
                  description: message
              example:
                chat_thread_id: d504386d-6cba-4e38-96f0-aa16b83e1cd8
                text: hi
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "298"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Mon, 20 May 2024 06:12:02 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatInteraction"
              example:
                - actor: AI
                  created_at: Mon, 20 May 2024 06:12:02 GMT
                  dw_data: {}
                  id: 1948
                  message: Hello! How can I assist you today?
                  metadata: {}
                  model: gpt-3.5-turbo
                  reference: []
                  thread_id: d504386d-6cba-4e38-96f0-aa16b83e1cd8
                  timestamp: Mon, 20 May 2024 06:12:02 GMT
                  user_credits: 49
  /chat/list-interactions:
    post:
      tags:
        - Chat
      summary: List Interactions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_thread_id:
                  type: string
                  description: Id of chat to which you want to send message
                text:
                  type: string
                  description: message
              example:
                chat_thread_id: d504386d-6cba-4e38-96f0-aa16b83e1cd8
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "454"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Mon, 20 May 2024 06:14:50 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatInteraction"
              example:
                - actor: USER
                  created_at: Mon, 20 May 2024 06:11:58 GMT
                  id: 1947
                  message: hi
                  metadata: {}
                  reference: []
                  thread_id: d504386d-6cba-4e38-96f0-aa16b83e1cd8
                  timestamp: Mon, 20 May 2024 06:11:58 GMT
                - actor: AI
                  created_at: Mon, 20 May 2024 06:12:02 GMT
                  id: 1948
                  message: Hello! How can I assist you today?
                  metadata: {}
                  reference: []
                  thread_id: d504386d-6cba-4e38-96f0-aa16b83e1cd8
                  timestamp: Mon, 20 May 2024 06:12:02 GMT
  /chatbot/create:
    post:
      tags:
        - Chatbot
      summary: Create Chatbot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Chatbot -1
                  description: The name of the chatbot
                brain_id:
                  type: string
                  example: 1f1d7a6a-e45b-4974-a0ba-98935650cb9c
                  description: The ID of the brain associated with the chatbot
                urls:
                  type: array
                  items:
                    type: string
                    example:
                      - https://byteleap.co
                      - https://ayushgoyal.dev
                    description: An array of URLs associated with the chatbot
              required:
                - name
                - brain_id
                - urls
              example:
                name: Chatbot -1
                brain_id: 1f1d7a6a-e45b-4974-a0ba-98935650cb9c
                urls:
                  - https://byteleap.co
                  - https://ayushgoyal.dev
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.9.18
            Date:
              schema:
                type: string
                example: Sun, 18 Feb 2024 19:00:11 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "388"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatbotResponse"
              example:
                - api_key: 83816958-931c-42c0-9a21-c6f61c7cdcdb
                  brain_id: 37d53982-bf08-4058-88d5-f91df0a7ab41
                  created_at: "2024-02-18T19:00:11.989503+00:00"
                  id: 7a2e792d-cf48-49d2-a36d-186be034a9dc
                  name: Chatbot -1
                  urls:
                    - https://byteleap.co
                    - https://ayushgoyal.dev
                  user_id: a7a690e6-2a83-4ec5-8eb2-73b0c1d0aa9c
  /chatbot/list:
    get:
      tags:
        - Chatbot
      summary: List Chatbots
      parameters:
        - in: query
          name: brain_id
          schema:
            type: string
          description: The ID of the brain to filter chatbots
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: string
                example: Werkzeug/3.0.1 Python/3.9.18
            Date:
              schema:
                type: string
                example: Sun, 18 Feb 2024 19:02:40 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "388"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatbotResponse"
              examples:
                example-0:
                  summary: List All Chatbots for User
                  value:
                    - api_key: 83816958-931c-42c0-9a21-c6f61c7cdcdb
                      brain_id: 37d53982-bf08-4058-88d5-f91df0a7ab41
                      created_at: "2024-02-18T19:00:11.989503+00:00"
                      id: 7a2e792d-cf48-49d2-a36d-186be034a9dc
                      name: Chatbot -1
                      urls:
                        - https://byteleap.co
                        - https://ayushgoyal.dev
                      user_id: a7a690e6-2a83-4ec5-8eb2-73b0c1d0aa9c
                example-1:
                  summary: List chatbots for brain
                  value:
                    - api_key: 83816958-931c-42c0-9a21-c6f61c7cdcdb
                      brain_id: 37d53982-bf08-4058-88d5-f91df0a7ab41
                      created_at: "2024-02-18T19:00:11.989503+00:00"
                      id: 7a2e792d-cf48-49d2-a36d-186be034a9dc
                      name: Chatbot -1
                      urls:
                        - https://byteleap.co
                        - https://ayushgoyal.dev
                      user_id: a7a690e6-2a83-4ec5-8eb2-73b0c1d0aa9c
  /chatbot/get:
    post:
      tags:
        - Chatbot
      summary: Get Chatbot
      parameters:
        - name: chatbot_id
          in: query
          schema:
            type: string
          example: 7a2e792d-cf48-49d2-a36d-186be034a9dc
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.9.18
            Date:
              schema:
                type: string
                example: Sun, 18 Feb 2024 19:05:35 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "360"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatbotResponse"
              example:
                api_key: 83816958-931c-42c0-9a21-c6f61c7cdcdb
                brain_id: 37d53982-bf08-4058-88d5-f91df0a7ab41
                created_at: "2024-02-18T19:00:11.989503+00:00"
                id: 7a2e792d-cf48-49d2-a36d-186be034a9dc
                name: Chatbot -1
                urls:
                  - https://byteleap.co
                  - https://ayushgoyal.dev
                user_id: a7a690e6-2a83-4ec5-8eb2-73b0c1d0aa9c
  /chatbot/analytics:
    get:
      tags:
        - Chatbot
      summary: Get Chatbot analytics
      parameters:
        - name: chatbot_id
          in: query
          schema:
            type: string
          example: 1a718a80-71c0-414b-915c-5c5991597ac7
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "45"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Mon, 20 May 2024 06:47:45 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatbotAnalytics"
              example:
                number_of_chats: 1
                number_of_messages: 2
  /chatbot/get_messages:
    get:
      tags:
        - Chatbot
      summary: Get Chatbot messages
      description: "note: there is a limit of 10000 messages"
      parameters:
        - name: chatbot_id
          in: query
          schema:
            type: string
          example: 1a718a80-71c0-414b-915c-5c5991597ac7
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "394"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Mon, 20 May 2024 06:46:18 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatbotMessages"
              example:
                chat_messages:
                  - actor: USER
                    created_at: "2024-05-20T06:46:09.010233+00:00"
                    id: 461
                    message: hi
                    reference: []
                    thread_id: 7c621be0-96d8-4ecc-9149-74d0ff94f106
                    timestamp: null
                  - actor: AI
                    created_at: "2024-05-20T06:46:12.300393+00:00"
                    id: 462
                    message: Hello! How can I assist you today?
                    reference: []
                    thread_id: 7c621be0-96d8-4ecc-9149-74d0ff94f106
                    timestamp: null
  /chatbot/update:
    post:
      tags:
        - Chatbot
      summary: Update Chatbot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                chatbot_id:
                  type: string
                  description: The id of the chatbot
                name:
                  type: string
                  example: Chatbot -1
                  description: The name of the chatbot
                  nullable: true
                urls:
                  type: array
                  nullable: true
                  items:
                    type: string
                    example:
                      - https://byteleap.co
                      - https://ayushgoyal.dev
                    description: An array of URLs associated with the chatbot
              example:
                chatbot_id: 1a718a80-71c0-414b-915c-5c5991597ac7
                urls:
                  - https://byteleap.co
                  - https://anshgoyal.com
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.9.18
            Date:
              schema:
                type: string
                example: Sun, 18 Feb 2024 19:08:17 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "389"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatbotResponse"
              example:
                - api_key: 83816958-931c-42c0-9a21-c6f61c7cdcdb
                  brain_id: 37d53982-bf08-4058-88d5-f91df0a7ab41
                  created_at: "2024-02-18T19:00:11.989503+00:00"
                  id: 7a2e792d-cf48-49d2-a36d-186be034a9dc
                  name: Updated Name
                  urls:
                    - https://byteleap.co
                    - https://anshgoyal.com
                  user_id: a7a690e6-2a83-4ec5-8eb2-73b0c1d0aa9c
  /chatbot/delete:
    post:
      tags:
        - Chatbot
      summary: Delete Chatbot
      parameters:
        - name: chatbot_id
          in: query
          schema:
            type: string
          example: 2de69bc3-3f60-46a2-be30-e95c98ab7a87
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.12.2
            Date:
              schema:
                type: string
                example: Mon, 20 May 2024 06:55:16 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "37"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
              example:
                message: Chat bot deleted.
  /chatbot/reset:
    post:
      tags:
        - Chatbot
      summary: Reset Token
      parameters:
        - name: chatbot_id
          in: query
          schema:
            type: string
          example: c7af119a-a5c6-47a4-a5fd-fbf96ef08851
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.9.18
            Date:
              schema:
                type: string
                example: Sun, 18 Feb 2024 19:10:54 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "389"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatbotResponse"
              example:
                api_key: fe527e6f-9518-4200-93ef-e082ba2467a5
                brain_id: 37d53982-bf08-4058-88d5-f91df0a7ab41
                created_at: "2024-02-18T19:00:11.989503+00:00"
                id: 7a2e792d-cf48-49d2-a36d-186be034a9dc
                name: Updated Name
                urls:
                  - https://byteleap.co
                  - https://anshgoyal.com
                user_id: a7a690e6-2a83-4ec5-8eb2-73b0c1d0aa9c
  /integration/{integration_name}/connect/:
    post:
      tags:
        - Integration
      summary: Connect
      parameters:
        - name: integration_name
          in: path
          schema:
            type: string
          required: true
          description: >-
            Currently supported integrations are "notion" and "confluence". More
            integrations will be added in the future.
          example: notion
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.11.6
            Date:
              schema:
                type: string
                example: Sat, 24 Feb 2024 14:00:09 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "237"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: URL to connect to the integration
                    example: >-
                      https://api.notion.com/v1/oauth/authorize?response_type=code&client_id=a96174bc-de34-4892-927b-b7eb234d1794&redirect_uri=http%3A%2F%2Flocalhost%3A4000%2Fintegration%2Fnotion%2Fcallback&state=x6FYlEiFfwvxtuOuuN7oFMjJPOpRBE
  /integration/{integration_name}/disconnect/:
    post:
      tags:
        - Integration
      summary: Disconnect
      parameters:
        - name: integration_name
          in: path
          schema:
            type: string
          required: true
          description: >-
            Currently supported integrations are "notion" and "confluence". More
            integrations will be added in the future.
          example: notion
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                description: Empty object
  /integration/{integration_name}/list:
    get:
      tags:
        - Integration
      summary: List
      description: list pages from integration
      parameters:
        - name: integration_name
          in: path
          schema:
            type: string
          required: true
          description: >-
            Currently supported integrations are "notion" and "confluence". More
            integrations will be added in the future.
          example: confluence
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "960"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Mon, 20 May 2024 06:42:17 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                type: array
                description: Array of pages from the integration
                items:
                  type: object
                  properties:
                    content:
                      type: object
                      description: Content of the page
                    created_at:
                      type: string
                      description: Creation timestamp of the page
                      example: "2024-05-20T06:19:00.209Z"
                    id:
                      type: string
                      description: ID of the page
                      example: "65620"
                    title:
                      type: string
                      description: Title of the page
                      example: Getting started in Confluence
                    updated_at:
                      type: string
                      description: Last updated timestamp of the page
                      example: "2024-05-20T06:19:00.209Z"
                    url:
                      type: string
                      description: URL of the page
                      example: >-
                        https://shreyaans20.atlassian.net/wiki/spaces/~712020b4e5987a0eaa4fae8878f723efab571b/pages/65620/Getting+started+in+Confluence
  /integration/{integration_name}/add:
    post:
      tags:
        - Integration
      summary: Add To Brain
      description: used to add pages to brain
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                brain_id:
                  type: string
                  description: ID of the brain to add pages to
                page_ids:
                  type: array
                  description: Array of page IDs to add to the brain
                  items:
                    type: string
                    description: An array of page_ids you want to add
              example:
                brain_id: 1f1d7a6a-e45b-4974-a0ba-98935650cb9c
                page_ids:
                  - "65621"
      parameters:
        - name: integration_name
          in: path
          schema:
            type: string
          required: true
          description: >-
            Currently supported integrations are "notion" and "confluence". More
            integrations will be added in the future.
          example: notion
      responses:
        "200":
          description: OK
          headers:
            Alt-Svc:
              schema:
                type: string
                example: h3=":443"; ma=2592000
            Content-Length:
              schema:
                type: integer
                example: "50"
            Content-Type:
              schema:
                type: string
                example: application/json
            Date:
              schema:
                type: string
                example: Mon, 20 May 2024 06:43:04 GMT
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.10.13
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating the pages are being added to the brain
                    example: Pages are being added to the brain.
  /organisation/:
    get:
      tags:
        - ogranisation
      summary: get user org
      responses:
        "200":
          description: OK
          headers:
            Server:
              schema:
                type: number
                example: Werkzeug/3.0.1 Python/3.12.3
            Date:
              schema:
                type: string
                example: Wed, 22 May 2024 07:07:14 GMT
            Content-Type:
              schema:
                type: string
                example: application/json
            Content-Length:
              schema:
                type: integer
                example: "322"
            Connection:
              schema:
                type: string
                example: close
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    description: Creation timestamp of the organization
                    example: Thu, 16 May 2024 18:57:16 GMT
                  email:
                    type: string
                    description: Email associated with the organization
                  id:
                    type: integer
                    description: ID of the organization
                    example: 62
                  name:
                    type: string
                    description: Name of the organization
                    example: Organization for ___
                  org_name:
                    type: string
                    description: Name of the organization (same as 'name')
                    nullable: true
                  org_uuid:
                    type: string
                    description: UUID of the organization
                    example: 989ad142-ab62-4e6b-92b6-83a25dec3151
                  role:
                    type: string
                    description: Role of the user in the organization
                    example: admin
                  token:
                    type: string
                    description: Invite token for the organization
                  user_uuid:
                    type: string
                    description: UUID of the user
                    example: 6cc35c0a-5095-4677-ac22-843a68138f53
