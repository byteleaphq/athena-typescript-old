/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as operations from "../models/operations";

export class Integration extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Connect
     */
    async getIntegrationIntegrationNameConnect(
        integrationName: string,
        options?: RequestOptions
    ): Promise<operations.GetIntegrationIntegrationNameConnectResponse> {
        const input$: operations.GetIntegrationIntegrationNameConnectRequest = {
            integrationName: integrationName,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.GetIntegrationIntegrationNameConnectRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            integration_name: enc$.encodeSimple("integration_name", payload$.integration_name, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/integration/{integration_name}/connect")(
            pathParams$
        );

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "get_/integration/{integration_name}/connect",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] =
            await this.matcher<operations.GetIntegrationIntegrationNameConnectResponse>()
                .json(200, operations.GetIntegrationIntegrationNameConnectResponse$, {
                    hdrs: true,
                    key: "object",
                })
                .fail(["4XX", "5XX"])
                .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Disconnect
     */
    async getIntegrationIntegrationNameDisconnect(
        integrationName: string,
        options?: RequestOptions
    ): Promise<operations.GetIntegrationIntegrationNameDisconnectResponse> {
        const input$: operations.GetIntegrationIntegrationNameDisconnectRequest = {
            integrationName: integrationName,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.GetIntegrationIntegrationNameDisconnectRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            integration_name: enc$.encodeSimple("integration_name", payload$.integration_name, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/integration/{integration_name}/disconnect")(
            pathParams$
        );

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "get_/integration/{integration_name}/disconnect",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] =
            await this.matcher<operations.GetIntegrationIntegrationNameDisconnectResponse>()
                .json(200, operations.GetIntegrationIntegrationNameDisconnectResponse$, {
                    key: "object",
                })
                .fail(["4XX", "5XX"])
                .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List
     *
     * @remarks
     * list pages from integration
     */
    async getIntegrationIntegrationNameList(
        integrationName: string,
        options?: RequestOptions
    ): Promise<operations.GetIntegrationIntegrationNameListResponse> {
        const input$: operations.GetIntegrationIntegrationNameListRequest = {
            integrationName: integrationName,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.GetIntegrationIntegrationNameListRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            integration_name: enc$.encodeSimple("integration_name", payload$.integration_name, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/integration/{integration_name}/list")(
            pathParams$
        );

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "get_/integration/{integration_name}/list",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetIntegrationIntegrationNameListResponse>()
            .json(200, operations.GetIntegrationIntegrationNameListResponse$, {
                hdrs: true,
                key: "responseBodies",
            })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Add To Brain
     *
     * @remarks
     * used to add pages to brain
     */
    async postIntegrationIntegrationNameAdd(
        integrationName: string,
        requestBody?: operations.PostIntegrationIntegrationNameAddRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.PostIntegrationIntegrationNameAddResponse> {
        const input$: operations.PostIntegrationIntegrationNameAddRequest = {
            integrationName: integrationName,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.PostIntegrationIntegrationNameAddRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            integration_name: enc$.encodeSimple("integration_name", payload$.integration_name, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/integration/{integration_name}/add")(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "post_/integration/{integration_name}/add",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.PostIntegrationIntegrationNameAddResponse>()
            .json(200, operations.PostIntegrationIntegrationNameAddResponse$, {
                hdrs: true,
                key: "object",
            })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }
}
