/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";
import { isBlobLike } from "../types/blobs.js";

export class Document extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Create Text Document
     */
    async createTextDocument(
        brainId: string,
        requestBody?: operations.CreateTextDocumentRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateTextDocumentResponse> {
        const input$: operations.CreateTextDocumentRequest = {
            brainId: brainId,
            requestBody: requestBody,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateTextDocumentRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            brain_id: encodeSimple$("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/text")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "create_text_document",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.CreateTextDocumentResponse>()
            .json(200, operations.CreateTextDocumentResponse$inboundSchema, {
                hdrs: true,
                key: "Document",
            })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create Document by URL
     */
    async createUrlDocument(
        brainId: string,
        requestBody?: operations.CreateUrlDocumentRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateUrlDocumentResponse> {
        const input$: operations.CreateUrlDocumentRequest = {
            brainId: brainId,
            requestBody: requestBody,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateUrlDocumentRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            brain_id: encodeSimple$("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/url")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "create_url_document",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "500", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.CreateUrlDocumentResponse>()
            .json(200, operations.CreateUrlDocumentResponse$inboundSchema, {
                hdrs: true,
                key: "Document",
            })
            .json(500, errors.CreateUrlDocumentResponseBody$inboundSchema, {
                hdrs: true,
                err: true,
            })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Download
     */
    async downloadDocument(
        brainId: string,
        documentId: string,
        options?: RequestOptions
    ): Promise<operations.DownloadDocumentResponse> {
        const input$: operations.DownloadDocumentRequest = {
            brainId: brainId,
            documentId: documentId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DownloadDocumentRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            brain_id: encodeSimple$("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
            document_id: encodeSimple$("document_id", payload$.document_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/{document_id}/download")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "download_document",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.DownloadDocumentResponse>()
            .json(200, operations.DownloadDocumentResponse$inboundSchema, {
                hdrs: true,
                key: "object",
            })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List Documents
     */
    async getAllDocuments(
        brainId: string,
        options?: RequestOptions
    ): Promise<operations.GetAllDocumentsResponse> {
        const input$: operations.GetAllDocumentsRequest = {
            brainId: brainId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetAllDocumentsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            brain_id: encodeSimple$("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getAllDocuments",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetAllDocumentsResponse>()
            .json(200, operations.GetAllDocumentsResponse$inboundSchema, {
                hdrs: true,
                key: "Documents",
            })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get Document
     */
    async getDocumentById(
        brainId: string,
        documentId: string,
        options?: RequestOptions
    ): Promise<operations.GetDocumentByIdResponse> {
        const input$: operations.GetDocumentByIdRequest = {
            brainId: brainId,
            documentId: documentId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetDocumentByIdRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            brain_id: encodeSimple$("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
            document_id: encodeSimple$("document_id", payload$.document_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/{document_id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "get_document_by_id",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetDocumentByIdResponse>()
            .json(200, operations.GetDocumentByIdResponse$inboundSchema, {
                hdrs: true,
                key: "Document",
            })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete Document
     */
    async deleteDocument(
        brainId: string,
        documentId: string,
        options?: RequestOptions
    ): Promise<operations.DeleteDocumentResponse> {
        const input$: operations.DeleteDocumentRequest = {
            brainId: brainId,
            documentId: documentId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteDocumentRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            brain_id: encodeSimple$("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
            document_id: encodeSimple$("document_id", payload$.document_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/{document_id}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "delete_document",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.DeleteDocumentResponse>()
            .json(200, operations.DeleteDocumentResponse$inboundSchema, {
                hdrs: true,
                key: "DeleteResponse",
            })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Upload Document
     */
    async uploadDocument(
        brainId: string,
        requestBody?: operations.UploadDocumentRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.UploadDocumentResponse> {
        const input$: operations.UploadDocumentRequest = {
            brainId: brainId,
            requestBody: requestBody,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UploadDocumentRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = new FormData();
        if (payload$.RequestBody != null) {
            if (payload$.RequestBody.file !== undefined) {
                if (isBlobLike(payload$.RequestBody.file)) {
                    body$.append("file", payload$.RequestBody.file);
                } else {
                    body$.append(
                        "file",
                        new Blob([payload$.RequestBody.file.content], {
                            type: "application/octet-stream",
                        }),
                        payload$.RequestBody.file.fileName
                    );
                }
            }
        }

        const pathParams$ = {
            brain_id: encodeSimple$("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/file")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "upload_document",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "4XX", "500", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.UploadDocumentResponse>()
            .json(200, operations.UploadDocumentResponse$inboundSchema, { key: "Document" })
            .json(400, errors.UploadDocumentResponseBody$inboundSchema, { err: true })
            .json(500, errors.UploadDocumentDocumentResponseBody$inboundSchema, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Search documents
     *
     * @remarks
     * Search for documents within a specific brain
     */
    async searchDocuments(
        brainId: string,
        searchQuery?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.SearchDocumentsResponse> {
        const input$: operations.SearchDocumentsRequest = {
            searchQuery: searchQuery,
            brainId: brainId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.SearchDocumentsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            brain_id: encodeSimple$("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/search")(pathParams$);

        const query$ = encodeFormQuery$({
            search_query: payload$.search_query,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "searchDocuments",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.SearchDocumentsResponse>()
            .json(200, operations.SearchDocumentsResponse$inboundSchema, { key: "Documents" })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create document review
     *
     * @remarks
     * Create a new document review
     */
    async createDocumentReview(
        request: operations.CreateDocumentReviewRequestBody,
        options?: RequestOptions
    ): Promise<operations.CreateDocumentReviewResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateDocumentReviewRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/document/review")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "createDocumentReview",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.CreateDocumentReviewResponse>()
            .json(200, operations.CreateDocumentReviewResponse$inboundSchema, {
                key: "DocumentReview",
            })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List document reviews
     *
     * @remarks
     * Retrieve a list of document reviews
     */
    async listDocumentReviews(
        brainId?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.ListDocumentReviewsResponse> {
        const input$: operations.ListDocumentReviewsRequest = {
            brainId: brainId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListDocumentReviewsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/document/review")();

        const query$ = encodeFormQuery$({
            brain_id: payload$.brain_id,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "listDocumentReviews",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.ListDocumentReviewsResponse>()
            .json(200, operations.ListDocumentReviewsResponse$inboundSchema, {
                key: "DocumentReviewDetails",
            })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }
}
