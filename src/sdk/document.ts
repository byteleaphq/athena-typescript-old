/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../models/errors";
import * as operations from "../models/operations";
import { isBlobLike } from "../types";

export class Document extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Create Text Document
     */
    async postDocumentBrainIdText(
        brainId: string,
        requestBody?: operations.PostDocumentBrainIdTextRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.PostDocumentBrainIdTextResponse> {
        const input$: operations.PostDocumentBrainIdTextRequest = {
            brainId: brainId,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.PostDocumentBrainIdTextRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            brain_id: enc$.encodeSimple("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/text")(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "post_/document/{brain_id}/text",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.PostDocumentBrainIdTextResponse>()
            .json(200, operations.PostDocumentBrainIdTextResponse$, { hdrs: true, key: "Document" })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create Document by URL
     */
    async postDocumentBrainIdUrl(
        brainId: string,
        requestBody?: operations.PostDocumentBrainIdUrlRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.PostDocumentBrainIdUrlResponse> {
        const input$: operations.PostDocumentBrainIdUrlRequest = {
            brainId: brainId,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.PostDocumentBrainIdUrlRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            brain_id: enc$.encodeSimple("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/url")(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "post_/document/{brain_id}/url",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "500", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.PostDocumentBrainIdUrlResponse>()
            .json(200, operations.PostDocumentBrainIdUrlResponse$, { hdrs: true, key: "Document" })
            .fail(["4XX", "5XX"])
            .json(500, errors.PostDocumentBrainIdUrlResponseBody$, { hdrs: true, err: true })
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Download
     */
    async getDocumentBrainIdDocumentIdDownload(
        brainId: string,
        documentId: string,
        options?: RequestOptions
    ): Promise<operations.GetDocumentBrainIdDocumentIdDownloadResponse> {
        const input$: operations.GetDocumentBrainIdDocumentIdDownloadRequest = {
            brainId: brainId,
            documentId: documentId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.GetDocumentBrainIdDocumentIdDownloadRequest$.outboundSchema.parse(
                    value$
                ),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            brain_id: enc$.encodeSimple("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
            document_id: enc$.encodeSimple("document_id", payload$.document_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/{document_id}/download")(
            pathParams$
        );

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "get_/document/{brain_id}/{document_id}/download",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] =
            await this.matcher<operations.GetDocumentBrainIdDocumentIdDownloadResponse>()
                .json(200, operations.GetDocumentBrainIdDocumentIdDownloadResponse$, {
                    hdrs: true,
                    key: "object",
                })
                .fail(["4XX", "5XX"])
                .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List Documents
     */
    async getDocumentBrainId(
        brainId: string,
        options?: RequestOptions
    ): Promise<operations.GetDocumentBrainIdResponse> {
        const input$: operations.GetDocumentBrainIdRequest = {
            brainId: brainId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetDocumentBrainIdRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            brain_id: enc$.encodeSimple("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}")(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "get_/document/{brain_id}",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetDocumentBrainIdResponse>()
            .json(200, operations.GetDocumentBrainIdResponse$, { hdrs: true, key: "Documents" })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get Document
     */
    async getDocumentBrainIdDocumentId(
        brainId: string,
        documentId: string,
        options?: RequestOptions
    ): Promise<operations.GetDocumentBrainIdDocumentIdResponse> {
        const input$: operations.GetDocumentBrainIdDocumentIdRequest = {
            brainId: brainId,
            documentId: documentId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.GetDocumentBrainIdDocumentIdRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            brain_id: enc$.encodeSimple("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
            document_id: enc$.encodeSimple("document_id", payload$.document_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/{document_id}")(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "get_/document/{brain_id}/{document_id}",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetDocumentBrainIdDocumentIdResponse>()
            .json(200, operations.GetDocumentBrainIdDocumentIdResponse$, {
                hdrs: true,
                key: "Document",
            })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete Document
     */
    async deleteDocumentBrainIdDocumentId(
        brainId: string,
        documentId: string,
        options?: RequestOptions
    ): Promise<operations.DeleteDocumentBrainIdDocumentIdResponse> {
        const input$: operations.DeleteDocumentBrainIdDocumentIdRequest = {
            brainId: brainId,
            documentId: documentId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.DeleteDocumentBrainIdDocumentIdRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            brain_id: enc$.encodeSimple("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
            document_id: enc$.encodeSimple("document_id", payload$.document_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/{document_id}")(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "delete_/document/{brain_id}/{document_id}",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.DeleteDocumentBrainIdDocumentIdResponse>()
            .json(200, operations.DeleteDocumentBrainIdDocumentIdResponse$, {
                hdrs: true,
                key: "object",
            })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Upload Document
     */
    async postDocumentBrainIdFile(
        brainId: string,
        requestBody?: operations.PostDocumentBrainIdFileRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.PostDocumentBrainIdFileResponse> {
        const input$: operations.PostDocumentBrainIdFileRequest = {
            brainId: brainId,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.PostDocumentBrainIdFileRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = new FormData();
        if (payload$.RequestBody != null) {
            if (payload$.RequestBody.file !== undefined) {
                if (isBlobLike(payload$.RequestBody.file)) {
                    body$.append("file", payload$.RequestBody.file);
                } else {
                    body$.append(
                        "file",
                        new Blob([payload$.RequestBody.file.content], {
                            type: "application/octet-stream",
                        }),
                        payload$.RequestBody.file.fileName
                    );
                }
            }
        }

        const pathParams$ = {
            brain_id: enc$.encodeSimple("brain_id", payload$.brain_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/document/{brain_id}/file")(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "post_/document/{brain_id}/file",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.PostDocumentBrainIdFileResponse>()
            .json(200, operations.PostDocumentBrainIdFileResponse$, { hdrs: true, key: "Document" })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }
}
