/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { Brain } from "./brain.js";
import { Chat } from "./chat.js";
import { Chatbot } from "./chatbot.js";
import { Document } from "./document.js";
import { Integration } from "./integration.js";
import { Ogranisation } from "./ogranisation.js";

export class AthenaCopilot extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _brain?: Brain;
    get brain(): Brain {
        return (this._brain ??= new Brain(this.options$));
    }

    private _document?: Document;
    get document(): Document {
        return (this._document ??= new Document(this.options$));
    }

    private _chat?: Chat;
    get chat(): Chat {
        return (this._chat ??= new Chat(this.options$));
    }

    private _chatbot?: Chatbot;
    get chatbot(): Chatbot {
        return (this._chatbot ??= new Chatbot(this.options$));
    }

    private _integration?: Integration;
    get integration(): Integration {
        return (this._integration ??= new Integration(this.options$));
    }

    private _ogranisation?: Ogranisation;
    get ogranisation(): Ogranisation {
        return (this._ogranisation ??= new Ogranisation(this.options$));
    }
}
