/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

/**
 * Internal Server Error
 */
export type CreateNewBrainBrainResponseBodyData = {
    httpMeta: components.HTTPMetadata;
};

/**
 * Internal Server Error
 */
export class CreateNewBrainBrainResponseBody extends Error {
    httpMeta: components.HTTPMetadata;

    /** The original data that was passed to this error instance. */
    data$: CreateNewBrainBrainResponseBodyData;

    constructor(err: CreateNewBrainBrainResponseBodyData) {
        super("");
        this.data$ = err;

        this.httpMeta = err.httpMeta;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "CreateNewBrainBrainResponseBody";
    }
}

/**
 * Unauthorized
 */
export type CreateNewBrainResponseBodyData = {
    httpMeta: components.HTTPMetadata;
};

/**
 * Unauthorized
 */
export class CreateNewBrainResponseBody extends Error {
    httpMeta: components.HTTPMetadata;

    /** The original data that was passed to this error instance. */
    data$: CreateNewBrainResponseBodyData;

    constructor(err: CreateNewBrainResponseBodyData) {
        super("");
        this.data$ = err;

        this.httpMeta = err.httpMeta;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "CreateNewBrainResponseBody";
    }
}

/** @internal */
export namespace CreateNewBrainBrainResponseBody$ {
    export const inboundSchema: z.ZodType<CreateNewBrainBrainResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                HttpMeta: components.HTTPMetadata$.inboundSchema,
            })
            .transform((v) => {
                const remapped = remap$(v, {
                    HttpMeta: "httpMeta",
                });

                return new CreateNewBrainBrainResponseBody(remapped);
            });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateNewBrainBrainResponseBody
    > = z
        .instanceof(CreateNewBrainBrainResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    httpMeta: components.HTTPMetadata$.outboundSchema,
                })
                .transform((v) => {
                    return remap$(v, {
                        httpMeta: "HttpMeta",
                    });
                })
        );
}

/** @internal */
export namespace CreateNewBrainResponseBody$ {
    export const inboundSchema: z.ZodType<CreateNewBrainResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
        })
        .transform((v) => {
            const remapped = remap$(v, {
                HttpMeta: "httpMeta",
            });

            return new CreateNewBrainResponseBody(remapped);
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateNewBrainResponseBody> = z
        .instanceof(CreateNewBrainResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    httpMeta: components.HTTPMetadata$.outboundSchema,
                })
                .transform((v) => {
                    return remap$(v, {
                        httpMeta: "HttpMeta",
                    });
                })
        );
}
