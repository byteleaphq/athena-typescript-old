/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

/**
 * Internal Server Error
 */
export type UploadDocumentDocumentResponseBodyData = {
    error?: string | undefined;
    httpMeta: components.HTTPMetadata;
};

/**
 * Internal Server Error
 */
export class UploadDocumentDocumentResponseBody extends Error {
    error?: string | undefined;
    httpMeta: components.HTTPMetadata;

    /** The original data that was passed to this error instance. */
    data$: UploadDocumentDocumentResponseBodyData;

    constructor(err: UploadDocumentDocumentResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.error != null) {
            this.error = err.error;
        }
        this.httpMeta = err.httpMeta;

        this.name = "UploadDocumentDocumentResponseBody";
    }
}

/**
 * Bad Request
 */
export type UploadDocumentResponseBodyData = {
    error?: string | undefined;
    httpMeta: components.HTTPMetadata;
};

/**
 * Bad Request
 */
export class UploadDocumentResponseBody extends Error {
    error?: string | undefined;
    httpMeta: components.HTTPMetadata;

    /** The original data that was passed to this error instance. */
    data$: UploadDocumentResponseBodyData;

    constructor(err: UploadDocumentResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.error != null) {
            this.error = err.error;
        }
        this.httpMeta = err.httpMeta;

        this.name = "UploadDocumentResponseBody";
    }
}

/** @internal */
export const UploadDocumentDocumentResponseBody$inboundSchema: z.ZodType<
    UploadDocumentDocumentResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        error: z.string().optional(),
        HttpMeta: components.HTTPMetadata$inboundSchema,
    })
    .transform((v) => {
        const remapped = remap$(v, {
            HttpMeta: "httpMeta",
        });

        return new UploadDocumentDocumentResponseBody(remapped);
    });

/** @internal */
export type UploadDocumentDocumentResponseBody$Outbound = {
    error?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const UploadDocumentDocumentResponseBody$outboundSchema: z.ZodType<
    UploadDocumentDocumentResponseBody$Outbound,
    z.ZodTypeDef,
    UploadDocumentDocumentResponseBody
> = z
    .instanceof(UploadDocumentDocumentResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                error: z.string().optional(),
                httpMeta: components.HTTPMetadata$outboundSchema,
            })
            .transform((v) => {
                return remap$(v, {
                    httpMeta: "HttpMeta",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDocumentDocumentResponseBody$ {
    /** @deprecated use `UploadDocumentDocumentResponseBody$inboundSchema` instead. */
    export const inboundSchema = UploadDocumentDocumentResponseBody$inboundSchema;
    /** @deprecated use `UploadDocumentDocumentResponseBody$outboundSchema` instead. */
    export const outboundSchema = UploadDocumentDocumentResponseBody$outboundSchema;
    /** @deprecated use `UploadDocumentDocumentResponseBody$Outbound` instead. */
    export type Outbound = UploadDocumentDocumentResponseBody$Outbound;
}

/** @internal */
export const UploadDocumentResponseBody$inboundSchema: z.ZodType<
    UploadDocumentResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        error: z.string().optional(),
        HttpMeta: components.HTTPMetadata$inboundSchema,
    })
    .transform((v) => {
        const remapped = remap$(v, {
            HttpMeta: "httpMeta",
        });

        return new UploadDocumentResponseBody(remapped);
    });

/** @internal */
export type UploadDocumentResponseBody$Outbound = {
    error?: string | undefined;
    HttpMeta: components.HTTPMetadata$Outbound;
};

/** @internal */
export const UploadDocumentResponseBody$outboundSchema: z.ZodType<
    UploadDocumentResponseBody$Outbound,
    z.ZodTypeDef,
    UploadDocumentResponseBody
> = z
    .instanceof(UploadDocumentResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                error: z.string().optional(),
                httpMeta: components.HTTPMetadata$outboundSchema,
            })
            .transform((v) => {
                return remap$(v, {
                    httpMeta: "HttpMeta",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadDocumentResponseBody$ {
    /** @deprecated use `UploadDocumentResponseBody$inboundSchema` instead. */
    export const inboundSchema = UploadDocumentResponseBody$inboundSchema;
    /** @deprecated use `UploadDocumentResponseBody$outboundSchema` instead. */
    export const outboundSchema = UploadDocumentResponseBody$outboundSchema;
    /** @deprecated use `UploadDocumentResponseBody$Outbound` instead. */
    export type Outbound = UploadDocumentResponseBody$Outbound;
}
