/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * Internal Server Error
 */
export type PostDocumentBrainIdUrlResponseBodyData = {
    httpMeta: components.HTTPMetadata;
};

/**
 * Internal Server Error
 */
export class PostDocumentBrainIdUrlResponseBody extends Error {
    httpMeta: components.HTTPMetadata;

    /** The original data that was passed to this error instance. */
    data$: PostDocumentBrainIdUrlResponseBodyData;

    constructor(err: PostDocumentBrainIdUrlResponseBodyData) {
        super("");
        this.data$ = err;

        this.httpMeta = err.httpMeta;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "PostDocumentBrainIdUrlResponseBody";
    }
}

/** @internal */
export namespace PostDocumentBrainIdUrlResponseBody$ {
    export const inboundSchema: z.ZodType<
        PostDocumentBrainIdUrlResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
        })
        .transform((v) => {
            return new PostDocumentBrainIdUrlResponseBody({
                httpMeta: v.HttpMeta,
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocumentBrainIdUrlResponseBody
    > = z
        .instanceof(PostDocumentBrainIdUrlResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    httpMeta: components.HTTPMetadata$.outboundSchema,
                })
                .transform((v) => {
                    return {
                        HttpMeta: v.httpMeta,
                    };
                })
        );
}
