/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Document, Document$ } from "./document";
import * as z from "zod";

/**
 * The data related to the data warehouse integration
 */
export type DwData = {};

/**
 * The metadata associated with the interaction
 */
export type Metadata = {};

export type Two = {};

export type Reference = Two | Document;

export type ChatInteraction = {
    /**
     * The actor (USER or AI) of the interaction
     */
    actor?: string | undefined;
    /**
     * The timestamp when the interaction was created
     */
    createdAt?: string | undefined;
    /**
     * The data related to the data warehouse integration
     */
    dwData?: DwData | null | undefined;
    /**
     * The unique identifier of the interaction
     */
    id?: number | undefined;
    /**
     * The message content of the interaction
     */
    message?: string | undefined;
    /**
     * The metadata associated with the interaction
     */
    metadata?: Metadata | null | undefined;
    /**
     * The name of the model used for the interaction
     */
    model?: string | null | undefined;
    /**
     * The list of references associated with the interaction
     */
    reference?: Array<Two | Document> | null | undefined;
    /**
     * The ID of the chat thread associated with the interaction
     */
    threadId?: string | undefined;
    /**
     * The timestamp when the interaction occurred
     */
    timestamp?: string | undefined;
    /**
     * The number of credits used by the user for the interaction
     */
    userCredits?: number | null | undefined;
};

/** @internal */
export namespace DwData$ {
    export const inboundSchema: z.ZodType<DwData, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DwData> = z.object({});
}

/** @internal */
export namespace Metadata$ {
    export const inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Metadata> = z.object({});
}

/** @internal */
export namespace Two$ {
    export const inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Two> = z.object({});
}

/** @internal */
export namespace Reference$ {
    export const inboundSchema: z.ZodType<Reference, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Two$.inboundSchema),
        Document$.inboundSchema,
    ]);

    export type Outbound = Two$.Outbound | Document$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Reference> = z.union([
        z.lazy(() => Two$.outboundSchema),
        Document$.outboundSchema,
    ]);
}

/** @internal */
export namespace ChatInteraction$ {
    export const inboundSchema: z.ZodType<ChatInteraction, z.ZodTypeDef, unknown> = z
        .object({
            actor: z.string().optional(),
            created_at: z.string().optional(),
            dw_data: z.nullable(z.lazy(() => DwData$.inboundSchema)).optional(),
            id: z.number().int().optional(),
            message: z.string().optional(),
            metadata: z.nullable(z.lazy(() => Metadata$.inboundSchema)).optional(),
            model: z.nullable(z.string()).optional(),
            reference: z
                .nullable(
                    z.array(z.union([z.lazy(() => Two$.inboundSchema), Document$.inboundSchema]))
                )
                .optional(),
            thread_id: z.string().optional(),
            timestamp: z.string().optional(),
            user_credits: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.actor === undefined ? null : { actor: v.actor }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.dw_data === undefined ? null : { dwData: v.dw_data }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.model === undefined ? null : { model: v.model }),
                ...(v.reference === undefined ? null : { reference: v.reference }),
                ...(v.thread_id === undefined ? null : { threadId: v.thread_id }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.user_credits === undefined ? null : { userCredits: v.user_credits }),
            };
        });

    export type Outbound = {
        actor?: string | undefined;
        created_at?: string | undefined;
        dw_data?: DwData$.Outbound | null | undefined;
        id?: number | undefined;
        message?: string | undefined;
        metadata?: Metadata$.Outbound | null | undefined;
        model?: string | null | undefined;
        reference?: Array<Two$.Outbound | Document$.Outbound> | null | undefined;
        thread_id?: string | undefined;
        timestamp?: string | undefined;
        user_credits?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatInteraction> = z
        .object({
            actor: z.string().optional(),
            createdAt: z.string().optional(),
            dwData: z.nullable(z.lazy(() => DwData$.outboundSchema)).optional(),
            id: z.number().int().optional(),
            message: z.string().optional(),
            metadata: z.nullable(z.lazy(() => Metadata$.outboundSchema)).optional(),
            model: z.nullable(z.string()).optional(),
            reference: z
                .nullable(
                    z.array(z.union([z.lazy(() => Two$.outboundSchema), Document$.outboundSchema]))
                )
                .optional(),
            threadId: z.string().optional(),
            timestamp: z.string().optional(),
            userCredits: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.actor === undefined ? null : { actor: v.actor }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.dwData === undefined ? null : { dw_data: v.dwData }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.model === undefined ? null : { model: v.model }),
                ...(v.reference === undefined ? null : { reference: v.reference }),
                ...(v.threadId === undefined ? null : { thread_id: v.threadId }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.userCredits === undefined ? null : { user_credits: v.userCredits }),
            };
        });
}
