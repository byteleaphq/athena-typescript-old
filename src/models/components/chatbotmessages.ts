/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Document, Document$ } from "./document";
import * as z from "zod";

export type Reference2 = {};

export type ChatbotMessagesReference = Reference2 | Document;

export type ChatMessages = {
    /**
     * The actor of the message, either USER or AI
     */
    actor?: string | undefined;
    /**
     * The timestamp when the message was created
     */
    createdAt?: string | undefined;
    /**
     * The ID of the message
     */
    id?: number | undefined;
    /**
     * The content of the message
     */
    message?: string | undefined;
    /**
     * The list of references associated with the interaction
     */
    reference?: Array<Reference2 | Document> | null | undefined;
    /**
     * The ID of the thread the message belongs to
     */
    threadId?: string | undefined;
    /**
     * The timestamp of the message, if available
     */
    timestamp?: string | null | undefined;
};

export type ChatbotMessages = {
    chatMessages?: Array<ChatMessages> | undefined;
};

/** @internal */
export namespace Reference2$ {
    export const inboundSchema: z.ZodType<Reference2, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Reference2> = z.object({});
}

/** @internal */
export namespace ChatbotMessagesReference$ {
    export const inboundSchema: z.ZodType<ChatbotMessagesReference, z.ZodTypeDef, unknown> =
        z.union([z.lazy(() => Reference2$.inboundSchema), Document$.inboundSchema]);

    export type Outbound = Reference2$.Outbound | Document$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatbotMessagesReference> =
        z.union([z.lazy(() => Reference2$.outboundSchema), Document$.outboundSchema]);
}

/** @internal */
export namespace ChatMessages$ {
    export const inboundSchema: z.ZodType<ChatMessages, z.ZodTypeDef, unknown> = z
        .object({
            actor: z.string().optional(),
            created_at: z.string().optional(),
            id: z.number().int().optional(),
            message: z.string().optional(),
            reference: z
                .nullable(
                    z.array(
                        z.union([z.lazy(() => Reference2$.inboundSchema), Document$.inboundSchema])
                    )
                )
                .optional(),
            thread_id: z.string().optional(),
            timestamp: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.actor === undefined ? null : { actor: v.actor }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.reference === undefined ? null : { reference: v.reference }),
                ...(v.thread_id === undefined ? null : { threadId: v.thread_id }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        actor?: string | undefined;
        created_at?: string | undefined;
        id?: number | undefined;
        message?: string | undefined;
        reference?: Array<Reference2$.Outbound | Document$.Outbound> | null | undefined;
        thread_id?: string | undefined;
        timestamp?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatMessages> = z
        .object({
            actor: z.string().optional(),
            createdAt: z.string().optional(),
            id: z.number().int().optional(),
            message: z.string().optional(),
            reference: z
                .nullable(
                    z.array(
                        z.union([
                            z.lazy(() => Reference2$.outboundSchema),
                            Document$.outboundSchema,
                        ])
                    )
                )
                .optional(),
            threadId: z.string().optional(),
            timestamp: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.actor === undefined ? null : { actor: v.actor }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.reference === undefined ? null : { reference: v.reference }),
                ...(v.threadId === undefined ? null : { thread_id: v.threadId }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export namespace ChatbotMessages$ {
    export const inboundSchema: z.ZodType<ChatbotMessages, z.ZodTypeDef, unknown> = z
        .object({
            chat_messages: z.array(z.lazy(() => ChatMessages$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.chat_messages === undefined ? null : { chatMessages: v.chat_messages }),
            };
        });

    export type Outbound = {
        chat_messages?: Array<ChatMessages$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatbotMessages> = z
        .object({
            chatMessages: z.array(z.lazy(() => ChatMessages$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.chatMessages === undefined ? null : { chat_messages: v.chatMessages }),
            };
        });
}
