/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Document = {
    /**
     * The header or context information for the document chunk.
     */
    chunkHeader?: string | null | undefined;
    /**
     * The content or text of the document chunk.
     */
    content?: string | null | undefined;
    /**
     * The Unix timestamp representing the creation time of the document.
     */
    createdOn?: number | undefined;
    /**
     * The description or summary of the document.
     */
    description?: string | null | undefined;
    /**
     * The type of the document (e.g., raw_text, file, url).
     */
    documentType?: string | undefined;
    /**
     * The file extension of the document (if applicable).
     */
    fileExtension?: string | null | undefined;
    /**
     * The name of the file for the document (if applicable).
     */
    fileName?: string | null | undefined;
    /**
     * The unique identifier of the document.
     */
    id?: string | undefined;
    /**
     * The identifier of the knowledge base to which the document belongs.
     */
    knowledgeBaseId?: string | undefined;
    /**
     * The URL or link to the source of the document (if applicable).
     */
    linkToSource?: string | null | undefined;
    /**
     * The supplementary identifier of the document (if applicable).
     */
    suppId?: string | null | undefined;
    /**
     * The title of the document.
     */
    title?: string | null | undefined;
    /**
     * The URL of the document (if applicable).
     */
    url?: string | null | undefined;
    /**
     * The status of the document vectorization process.
     */
    vectorizationStatus?: string | undefined;
    /**
     * The total number of chunks the document is divided into.
     */
    totalChunks?: number | null | undefined;
};

/** @internal */
export namespace Document$ {
    export const inboundSchema: z.ZodType<Document, z.ZodTypeDef, unknown> = z
        .object({
            chunk_header: z.nullable(z.string()).optional(),
            content: z.nullable(z.string()).optional(),
            created_on: z.number().int().optional(),
            description: z.nullable(z.string()).optional(),
            document_type: z.string().optional(),
            file_extension: z.nullable(z.string()).optional(),
            file_name: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            knowledge_base_id: z.string().optional(),
            link_to_source: z.nullable(z.string()).optional(),
            supp_id: z.nullable(z.string()).optional(),
            title: z.nullable(z.string()).optional(),
            url: z.nullable(z.string()).optional(),
            vectorization_status: z.string().optional(),
            total_chunks: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.chunk_header === undefined ? null : { chunkHeader: v.chunk_header }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.created_on === undefined ? null : { createdOn: v.created_on }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.document_type === undefined ? null : { documentType: v.document_type }),
                ...(v.file_extension === undefined ? null : { fileExtension: v.file_extension }),
                ...(v.file_name === undefined ? null : { fileName: v.file_name }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.knowledge_base_id === undefined
                    ? null
                    : { knowledgeBaseId: v.knowledge_base_id }),
                ...(v.link_to_source === undefined ? null : { linkToSource: v.link_to_source }),
                ...(v.supp_id === undefined ? null : { suppId: v.supp_id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.vectorization_status === undefined
                    ? null
                    : { vectorizationStatus: v.vectorization_status }),
                ...(v.total_chunks === undefined ? null : { totalChunks: v.total_chunks }),
            };
        });

    export type Outbound = {
        chunk_header?: string | null | undefined;
        content?: string | null | undefined;
        created_on?: number | undefined;
        description?: string | null | undefined;
        document_type?: string | undefined;
        file_extension?: string | null | undefined;
        file_name?: string | null | undefined;
        id?: string | undefined;
        knowledge_base_id?: string | undefined;
        link_to_source?: string | null | undefined;
        supp_id?: string | null | undefined;
        title?: string | null | undefined;
        url?: string | null | undefined;
        vectorization_status?: string | undefined;
        total_chunks?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Document> = z
        .object({
            chunkHeader: z.nullable(z.string()).optional(),
            content: z.nullable(z.string()).optional(),
            createdOn: z.number().int().optional(),
            description: z.nullable(z.string()).optional(),
            documentType: z.string().optional(),
            fileExtension: z.nullable(z.string()).optional(),
            fileName: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            knowledgeBaseId: z.string().optional(),
            linkToSource: z.nullable(z.string()).optional(),
            suppId: z.nullable(z.string()).optional(),
            title: z.nullable(z.string()).optional(),
            url: z.nullable(z.string()).optional(),
            vectorizationStatus: z.string().optional(),
            totalChunks: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.chunkHeader === undefined ? null : { chunk_header: v.chunkHeader }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdOn === undefined ? null : { created_on: v.createdOn }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.documentType === undefined ? null : { document_type: v.documentType }),
                ...(v.fileExtension === undefined ? null : { file_extension: v.fileExtension }),
                ...(v.fileName === undefined ? null : { file_name: v.fileName }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.knowledgeBaseId === undefined
                    ? null
                    : { knowledge_base_id: v.knowledgeBaseId }),
                ...(v.linkToSource === undefined ? null : { link_to_source: v.linkToSource }),
                ...(v.suppId === undefined ? null : { supp_id: v.suppId }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.vectorizationStatus === undefined
                    ? null
                    : { vectorization_status: v.vectorizationStatus }),
                ...(v.totalChunks === undefined ? null : { total_chunks: v.totalChunks }),
            };
        });
}
