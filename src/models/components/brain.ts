/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * Active features of the brain. Currently used internally
 */
export type ActiveFeatures = {};

/**
 * Metadata schema for the brain
 */
export type MetadataSchema = {};

export type Brain = {
    /**
     * Active features of the brain. Currently used internally
     */
    activeFeatures?: ActiveFeatures | null | undefined;
    /**
     * Unique identifier for the brain
     */
    brainId?: string | undefined;
    /**
     * Timestamp when the brain was created
     */
    createdOn?: number | undefined;
    /**
     * Description of the brain
     */
    description?: string | undefined;
    /**
     * Number of documents in the brain
     */
    documentCount?: number | undefined;
    /**
     * Unique identifier for the brain (same as brain_id)
     */
    id?: string | undefined;
    /**
     * Language code of the brain
     */
    languageCode?: string | undefined;
    /**
     * Metadata schema for the brain
     */
    metadataSchema?: MetadataSchema | null | undefined;
    /**
     * Unique identifier for the organization
     */
    orgUuid?: string | undefined;
    /**
     * Total storage size of the brain in bytes
     */
    storageBytes?: number | undefined;
    /**
     * Supplementary identifier for the brain
     */
    suppId?: string | undefined;
    /**
     * Title or name of the brain
     */
    title?: string | undefined;
    /**
     * Type of the brain (e.g., unstructured, structured)
     */
    type?: string | undefined;
    /**
     * Timestamp when the brain was last updated
     */
    updatedOn?: number | undefined;
};

/** @internal */
export const ActiveFeatures$inboundSchema: z.ZodType<ActiveFeatures, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type ActiveFeatures$Outbound = {};

/** @internal */
export const ActiveFeatures$outboundSchema: z.ZodType<
    ActiveFeatures$Outbound,
    z.ZodTypeDef,
    ActiveFeatures
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActiveFeatures$ {
    /** @deprecated use `ActiveFeatures$inboundSchema` instead. */
    export const inboundSchema = ActiveFeatures$inboundSchema;
    /** @deprecated use `ActiveFeatures$outboundSchema` instead. */
    export const outboundSchema = ActiveFeatures$outboundSchema;
    /** @deprecated use `ActiveFeatures$Outbound` instead. */
    export type Outbound = ActiveFeatures$Outbound;
}

/** @internal */
export const MetadataSchema$inboundSchema: z.ZodType<MetadataSchema, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type MetadataSchema$Outbound = {};

/** @internal */
export const MetadataSchema$outboundSchema: z.ZodType<
    MetadataSchema$Outbound,
    z.ZodTypeDef,
    MetadataSchema
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataSchema$ {
    /** @deprecated use `MetadataSchema$inboundSchema` instead. */
    export const inboundSchema = MetadataSchema$inboundSchema;
    /** @deprecated use `MetadataSchema$outboundSchema` instead. */
    export const outboundSchema = MetadataSchema$outboundSchema;
    /** @deprecated use `MetadataSchema$Outbound` instead. */
    export type Outbound = MetadataSchema$Outbound;
}

/** @internal */
export const Brain$inboundSchema: z.ZodType<Brain, z.ZodTypeDef, unknown> = z
    .object({
        active_features: z.nullable(z.lazy(() => ActiveFeatures$inboundSchema)).optional(),
        brain_id: z.string().optional(),
        created_on: z.number().optional(),
        description: z.string().optional(),
        document_count: z.number().int().optional(),
        id: z.string().optional(),
        language_code: z.string().optional(),
        metadata_schema: z.nullable(z.lazy(() => MetadataSchema$inboundSchema)).optional(),
        org_uuid: z.string().optional(),
        storage_bytes: z.number().int().optional(),
        supp_id: z.string().optional(),
        title: z.string().optional(),
        type: z.string().optional(),
        updated_on: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            active_features: "activeFeatures",
            brain_id: "brainId",
            created_on: "createdOn",
            document_count: "documentCount",
            language_code: "languageCode",
            metadata_schema: "metadataSchema",
            org_uuid: "orgUuid",
            storage_bytes: "storageBytes",
            supp_id: "suppId",
            updated_on: "updatedOn",
        });
    });

/** @internal */
export type Brain$Outbound = {
    active_features?: ActiveFeatures$Outbound | null | undefined;
    brain_id?: string | undefined;
    created_on?: number | undefined;
    description?: string | undefined;
    document_count?: number | undefined;
    id?: string | undefined;
    language_code?: string | undefined;
    metadata_schema?: MetadataSchema$Outbound | null | undefined;
    org_uuid?: string | undefined;
    storage_bytes?: number | undefined;
    supp_id?: string | undefined;
    title?: string | undefined;
    type?: string | undefined;
    updated_on?: number | undefined;
};

/** @internal */
export const Brain$outboundSchema: z.ZodType<Brain$Outbound, z.ZodTypeDef, Brain> = z
    .object({
        activeFeatures: z.nullable(z.lazy(() => ActiveFeatures$outboundSchema)).optional(),
        brainId: z.string().optional(),
        createdOn: z.number().optional(),
        description: z.string().optional(),
        documentCount: z.number().int().optional(),
        id: z.string().optional(),
        languageCode: z.string().optional(),
        metadataSchema: z.nullable(z.lazy(() => MetadataSchema$outboundSchema)).optional(),
        orgUuid: z.string().optional(),
        storageBytes: z.number().int().optional(),
        suppId: z.string().optional(),
        title: z.string().optional(),
        type: z.string().optional(),
        updatedOn: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            activeFeatures: "active_features",
            brainId: "brain_id",
            createdOn: "created_on",
            documentCount: "document_count",
            languageCode: "language_code",
            metadataSchema: "metadata_schema",
            orgUuid: "org_uuid",
            storageBytes: "storage_bytes",
            suppId: "supp_id",
            updatedOn: "updated_on",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Brain$ {
    /** @deprecated use `Brain$inboundSchema` instead. */
    export const inboundSchema = Brain$inboundSchema;
    /** @deprecated use `Brain$outboundSchema` instead. */
    export const outboundSchema = Brain$outboundSchema;
    /** @deprecated use `Brain$Outbound` instead. */
    export type Outbound = Brain$Outbound;
}
