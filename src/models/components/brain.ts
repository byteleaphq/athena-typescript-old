/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Active features of the brain. Currently used internally
 */
export type ActiveFeatures = {};

/**
 * Metadata schema for the brain
 */
export type MetadataSchema = {};

export type Brain = {
    /**
     * Active features of the brain. Currently used internally
     */
    activeFeatures?: ActiveFeatures | null | undefined;
    /**
     * Unique identifier for the brain
     */
    brainId?: string | undefined;
    /**
     * Timestamp when the brain was created
     */
    createdOn?: number | undefined;
    /**
     * Description of the brain
     */
    description?: string | undefined;
    /**
     * Number of documents in the brain
     */
    documentCount?: number | undefined;
    /**
     * Unique identifier for the brain (same as brain_id)
     */
    id?: string | undefined;
    /**
     * Language code of the brain
     */
    languageCode?: string | undefined;
    /**
     * Metadata schema for the brain
     */
    metadataSchema?: MetadataSchema | null | undefined;
    /**
     * Unique identifier for the organization
     */
    orgUuid?: string | undefined;
    /**
     * Total storage size of the brain in bytes
     */
    storageBytes?: number | undefined;
    /**
     * Supplementary identifier for the brain
     */
    suppId?: string | undefined;
    /**
     * Title or name of the brain
     */
    title?: string | undefined;
    /**
     * Type of the brain (e.g., unstructured, structured)
     */
    type?: string | undefined;
    /**
     * Timestamp when the brain was last updated
     */
    updatedOn?: number | undefined;
};

/** @internal */
export namespace ActiveFeatures$ {
    export const inboundSchema: z.ZodType<ActiveFeatures, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ActiveFeatures> = z.object({});
}

/** @internal */
export namespace MetadataSchema$ {
    export const inboundSchema: z.ZodType<MetadataSchema, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MetadataSchema> = z.object({});
}

/** @internal */
export namespace Brain$ {
    export const inboundSchema: z.ZodType<Brain, z.ZodTypeDef, unknown> = z
        .object({
            active_features: z.nullable(z.lazy(() => ActiveFeatures$.inboundSchema)).optional(),
            brain_id: z.string().optional(),
            created_on: z.number().optional(),
            description: z.string().optional(),
            document_count: z.number().int().optional(),
            id: z.string().optional(),
            language_code: z.string().optional(),
            metadata_schema: z.nullable(z.lazy(() => MetadataSchema$.inboundSchema)).optional(),
            org_uuid: z.string().optional(),
            storage_bytes: z.number().int().optional(),
            supp_id: z.string().optional(),
            title: z.string().optional(),
            type: z.string().optional(),
            updated_on: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.active_features === undefined ? null : { activeFeatures: v.active_features }),
                ...(v.brain_id === undefined ? null : { brainId: v.brain_id }),
                ...(v.created_on === undefined ? null : { createdOn: v.created_on }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.document_count === undefined ? null : { documentCount: v.document_count }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.language_code === undefined ? null : { languageCode: v.language_code }),
                ...(v.metadata_schema === undefined ? null : { metadataSchema: v.metadata_schema }),
                ...(v.org_uuid === undefined ? null : { orgUuid: v.org_uuid }),
                ...(v.storage_bytes === undefined ? null : { storageBytes: v.storage_bytes }),
                ...(v.supp_id === undefined ? null : { suppId: v.supp_id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updated_on === undefined ? null : { updatedOn: v.updated_on }),
            };
        });

    export type Outbound = {
        active_features?: ActiveFeatures$.Outbound | null | undefined;
        brain_id?: string | undefined;
        created_on?: number | undefined;
        description?: string | undefined;
        document_count?: number | undefined;
        id?: string | undefined;
        language_code?: string | undefined;
        metadata_schema?: MetadataSchema$.Outbound | null | undefined;
        org_uuid?: string | undefined;
        storage_bytes?: number | undefined;
        supp_id?: string | undefined;
        title?: string | undefined;
        type?: string | undefined;
        updated_on?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Brain> = z
        .object({
            activeFeatures: z.nullable(z.lazy(() => ActiveFeatures$.outboundSchema)).optional(),
            brainId: z.string().optional(),
            createdOn: z.number().optional(),
            description: z.string().optional(),
            documentCount: z.number().int().optional(),
            id: z.string().optional(),
            languageCode: z.string().optional(),
            metadataSchema: z.nullable(z.lazy(() => MetadataSchema$.outboundSchema)).optional(),
            orgUuid: z.string().optional(),
            storageBytes: z.number().int().optional(),
            suppId: z.string().optional(),
            title: z.string().optional(),
            type: z.string().optional(),
            updatedOn: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.activeFeatures === undefined ? null : { active_features: v.activeFeatures }),
                ...(v.brainId === undefined ? null : { brain_id: v.brainId }),
                ...(v.createdOn === undefined ? null : { created_on: v.createdOn }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.documentCount === undefined ? null : { document_count: v.documentCount }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.languageCode === undefined ? null : { language_code: v.languageCode }),
                ...(v.metadataSchema === undefined ? null : { metadata_schema: v.metadataSchema }),
                ...(v.orgUuid === undefined ? null : { org_uuid: v.orgUuid }),
                ...(v.storageBytes === undefined ? null : { storage_bytes: v.storageBytes }),
                ...(v.suppId === undefined ? null : { supp_id: v.suppId }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updatedOn === undefined ? null : { updated_on: v.updatedOn }),
            };
        });
}
