/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type DocumentReview = {
    createdOn?: number | undefined;
    docReviewId?: string | undefined;
    id?: string | undefined;
    model?: string | undefined;
    review?: string | undefined;
    title?: string | undefined;
    userCredits?: number | undefined;
};

/** @internal */
export const DocumentReview$inboundSchema: z.ZodType<DocumentReview, z.ZodTypeDef, unknown> = z
    .object({
        created_on: z.number().int().optional(),
        doc_review_id: z.string().optional(),
        id: z.string().optional(),
        model: z.string().optional(),
        review: z.string().optional(),
        title: z.string().optional(),
        user_credits: z.number().int().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_on: "createdOn",
            doc_review_id: "docReviewId",
            user_credits: "userCredits",
        });
    });

/** @internal */
export type DocumentReview$Outbound = {
    created_on?: number | undefined;
    doc_review_id?: string | undefined;
    id?: string | undefined;
    model?: string | undefined;
    review?: string | undefined;
    title?: string | undefined;
    user_credits?: number | undefined;
};

/** @internal */
export const DocumentReview$outboundSchema: z.ZodType<
    DocumentReview$Outbound,
    z.ZodTypeDef,
    DocumentReview
> = z
    .object({
        createdOn: z.number().int().optional(),
        docReviewId: z.string().optional(),
        id: z.string().optional(),
        model: z.string().optional(),
        review: z.string().optional(),
        title: z.string().optional(),
        userCredits: z.number().int().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdOn: "created_on",
            docReviewId: "doc_review_id",
            userCredits: "user_credits",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentReview$ {
    /** @deprecated use `DocumentReview$inboundSchema` instead. */
    export const inboundSchema = DocumentReview$inboundSchema;
    /** @deprecated use `DocumentReview$outboundSchema` instead. */
    export const outboundSchema = DocumentReview$outboundSchema;
    /** @deprecated use `DocumentReview$Outbound` instead. */
    export type Outbound = DocumentReview$Outbound;
}
