/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type PutBrainBrainIdRequestBody = {
    /**
     * Updated name of the brain
     */
    name: string;
};

export type PutBrainBrainIdRequest = {
    brainId: string;
    requestBody?: PutBrainBrainIdRequestBody | undefined;
};

export type PutBrainBrainIdResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    brain?: components.Brain | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace PutBrainBrainIdRequestBody$ {
    export const inboundSchema: z.ZodType<PutBrainBrainIdRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
            };
        });

    export type Outbound = {
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PutBrainBrainIdRequestBody> = z
        .object({
            name: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
            };
        });
}

/** @internal */
export namespace PutBrainBrainIdRequest$ {
    export const inboundSchema: z.ZodType<PutBrainBrainIdRequest, z.ZodTypeDef, unknown> = z
        .object({
            brain_id: z.string(),
            RequestBody: z.lazy(() => PutBrainBrainIdRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                brainId: v.brain_id,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        brain_id: string;
        RequestBody?: PutBrainBrainIdRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PutBrainBrainIdRequest> = z
        .object({
            brainId: z.string(),
            requestBody: z.lazy(() => PutBrainBrainIdRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                brain_id: v.brainId,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace PutBrainBrainIdResponse$ {
    export const inboundSchema: z.ZodType<PutBrainBrainIdResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Brain: components.Brain$.inboundSchema.optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Brain === undefined ? null : { brain: v.Brain }),
                headers: v.Headers,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Brain?: components.Brain$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PutBrainBrainIdResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            brain: components.Brain$.outboundSchema.optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.brain === undefined ? null : { Brain: v.brain }),
                Headers: v.headers,
            };
        });
}
