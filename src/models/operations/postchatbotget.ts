/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type PostChatbotGetRequest = {
    chatbotId?: string | undefined;
};

export type PostChatbotGetResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    chatbotResponse?: components.ChatbotResponse | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace PostChatbotGetRequest$ {
    export const inboundSchema: z.ZodType<PostChatbotGetRequest, z.ZodTypeDef, unknown> = z
        .object({
            chatbot_id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.chatbot_id === undefined ? null : { chatbotId: v.chatbot_id }),
            };
        });

    export type Outbound = {
        chatbot_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostChatbotGetRequest> = z
        .object({
            chatbotId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.chatbotId === undefined ? null : { chatbot_id: v.chatbotId }),
            };
        });
}

/** @internal */
export namespace PostChatbotGetResponse$ {
    export const inboundSchema: z.ZodType<PostChatbotGetResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            ChatbotResponse: components.ChatbotResponse$.inboundSchema.optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.ChatbotResponse === undefined
                    ? null
                    : { chatbotResponse: v.ChatbotResponse }),
                headers: v.Headers,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        ChatbotResponse?: components.ChatbotResponse$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostChatbotGetResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            chatbotResponse: components.ChatbotResponse$.outboundSchema.optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.chatbotResponse === undefined
                    ? null
                    : { ChatbotResponse: v.chatbotResponse }),
                Headers: v.headers,
            };
        });
}
