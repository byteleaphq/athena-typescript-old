/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetDocumentBrainIdDocumentIdRequest = {
    brainId: string;
    documentId: string;
};

export type GetDocumentBrainIdDocumentIdResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    document?: components.Document | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace GetDocumentBrainIdDocumentIdRequest$ {
    export const inboundSchema: z.ZodType<
        GetDocumentBrainIdDocumentIdRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            brain_id: z.string(),
            document_id: z.string(),
        })
        .transform((v) => {
            return {
                brainId: v.brain_id,
                documentId: v.document_id,
            };
        });

    export type Outbound = {
        brain_id: string;
        document_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDocumentBrainIdDocumentIdRequest
    > = z
        .object({
            brainId: z.string(),
            documentId: z.string(),
        })
        .transform((v) => {
            return {
                brain_id: v.brainId,
                document_id: v.documentId,
            };
        });
}

/** @internal */
export namespace GetDocumentBrainIdDocumentIdResponse$ {
    export const inboundSchema: z.ZodType<
        GetDocumentBrainIdDocumentIdResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Document: components.Document$.inboundSchema.optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Document === undefined ? null : { document: v.Document }),
                headers: v.Headers,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Document?: components.Document$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDocumentBrainIdDocumentIdResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            document: components.Document$.outboundSchema.optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.document === undefined ? null : { Document: v.document }),
                Headers: v.headers,
            };
        });
}
