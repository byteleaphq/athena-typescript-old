/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GetIntegrationIntegrationNameListRequest = {
    /**
     * Currently supported integrations are "notion" and "confluence". More integrations will be added in the future.
     */
    integrationName: string;
};

/**
 * Content of the page
 */
export type Content = {};

export type ResponseBody = {
    /**
     * Content of the page
     */
    content?: Content | undefined;
    /**
     * Creation timestamp of the page
     */
    createdAt?: string | undefined;
    /**
     * ID of the page
     */
    id?: string | undefined;
    /**
     * Title of the page
     */
    title?: string | undefined;
    /**
     * Last updated timestamp of the page
     */
    updatedAt?: string | undefined;
    /**
     * URL of the page
     */
    url?: string | undefined;
};

export type GetIntegrationIntegrationNameListResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    responseBodies?: Array<ResponseBody> | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace GetIntegrationIntegrationNameListRequest$ {
    export const inboundSchema: z.ZodType<
        GetIntegrationIntegrationNameListRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            integration_name: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                integration_name: "integrationName",
            });
        });

    export type Outbound = {
        integration_name: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetIntegrationIntegrationNameListRequest
    > = z
        .object({
            integrationName: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                integrationName: "integration_name",
            });
        });
}

/** @internal */
export namespace Content$ {
    export const inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Content> = z.object({});
}

/** @internal */
export namespace ResponseBody$ {
    export const inboundSchema: z.ZodType<ResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            content: z.lazy(() => Content$.inboundSchema).optional(),
            created_at: z.string().optional(),
            id: z.string().optional(),
            title: z.string().optional(),
            updated_at: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
                updated_at: "updatedAt",
            });
        });

    export type Outbound = {
        content?: Content$.Outbound | undefined;
        created_at?: string | undefined;
        id?: string | undefined;
        title?: string | undefined;
        updated_at?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody> = z
        .object({
            content: z.lazy(() => Content$.outboundSchema).optional(),
            createdAt: z.string().optional(),
            id: z.string().optional(),
            title: z.string().optional(),
            updatedAt: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                createdAt: "created_at",
                updatedAt: "updated_at",
            });
        });
}

/** @internal */
export namespace GetIntegrationIntegrationNameListResponse$ {
    export const inboundSchema: z.ZodType<
        GetIntegrationIntegrationNameListResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            responseBodies: z.array(z.lazy(() => ResponseBody$.inboundSchema)).optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Headers: "headers",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        responseBodies?: Array<ResponseBody$.Outbound> | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetIntegrationIntegrationNameListResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            responseBodies: z.array(z.lazy(() => ResponseBody$.outboundSchema)).optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                headers: "Headers",
            });
        });
}
