/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type PostDocumentBrainIdTextRequestBody = {
    /**
     * Text that is to be added to the brain
     */
    content?: string | undefined;
};

export type PostDocumentBrainIdTextRequest = {
    brainId: string;
    requestBody?: PostDocumentBrainIdTextRequestBody | undefined;
};

export type PostDocumentBrainIdTextResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    document?: components.Document | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace PostDocumentBrainIdTextRequestBody$ {
    export const inboundSchema: z.ZodType<
        PostDocumentBrainIdTextRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            content: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.content === undefined ? null : { content: v.content }),
            };
        });

    export type Outbound = {
        content?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocumentBrainIdTextRequestBody
    > = z
        .object({
            content: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.content === undefined ? null : { content: v.content }),
            };
        });
}

/** @internal */
export namespace PostDocumentBrainIdTextRequest$ {
    export const inboundSchema: z.ZodType<PostDocumentBrainIdTextRequest, z.ZodTypeDef, unknown> = z
        .object({
            brain_id: z.string(),
            RequestBody: z.lazy(() => PostDocumentBrainIdTextRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                brainId: v.brain_id,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        brain_id: string;
        RequestBody?: PostDocumentBrainIdTextRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostDocumentBrainIdTextRequest> =
        z
            .object({
                brainId: z.string(),
                requestBody: z
                    .lazy(() => PostDocumentBrainIdTextRequestBody$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    brain_id: v.brainId,
                    ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                };
            });
}

/** @internal */
export namespace PostDocumentBrainIdTextResponse$ {
    export const inboundSchema: z.ZodType<PostDocumentBrainIdTextResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                HttpMeta: components.HTTPMetadata$.inboundSchema,
                Document: components.Document$.inboundSchema.optional(),
                Headers: z.record(z.array(z.string())),
            })
            .transform((v) => {
                return {
                    httpMeta: v.HttpMeta,
                    ...(v.Document === undefined ? null : { document: v.Document }),
                    headers: v.Headers,
                };
            });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Document?: components.Document$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocumentBrainIdTextResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            document: components.Document$.outboundSchema.optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.document === undefined ? null : { Document: v.document }),
                Headers: v.headers,
            };
        });
}
