/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type DeleteChatRequest = {
    chatId: string;
};

export type DeleteChatResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    chats?: Array<components.Chat> | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export const DeleteChatRequest$inboundSchema: z.ZodType<DeleteChatRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            chat_id: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                chat_id: "chatId",
            });
        });

/** @internal */
export type DeleteChatRequest$Outbound = {
    chat_id: string;
};

/** @internal */
export const DeleteChatRequest$outboundSchema: z.ZodType<
    DeleteChatRequest$Outbound,
    z.ZodTypeDef,
    DeleteChatRequest
> = z
    .object({
        chatId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            chatId: "chat_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteChatRequest$ {
    /** @deprecated use `DeleteChatRequest$inboundSchema` instead. */
    export const inboundSchema = DeleteChatRequest$inboundSchema;
    /** @deprecated use `DeleteChatRequest$outboundSchema` instead. */
    export const outboundSchema = DeleteChatRequest$outboundSchema;
    /** @deprecated use `DeleteChatRequest$Outbound` instead. */
    export type Outbound = DeleteChatRequest$Outbound;
}

/** @internal */
export const DeleteChatResponse$inboundSchema: z.ZodType<
    DeleteChatResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        Chats: z.array(components.Chat$inboundSchema).optional(),
        Headers: z.record(z.array(z.string())),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
            Chats: "chats",
            Headers: "headers",
        });
    });

/** @internal */
export type DeleteChatResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    Chats?: Array<components.Chat$Outbound> | undefined;
    Headers: { [k: string]: Array<string> };
};

/** @internal */
export const DeleteChatResponse$outboundSchema: z.ZodType<
    DeleteChatResponse$Outbound,
    z.ZodTypeDef,
    DeleteChatResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        chats: z.array(components.Chat$outboundSchema).optional(),
        headers: z.record(z.array(z.string())),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
            chats: "Chats",
            headers: "Headers",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteChatResponse$ {
    /** @deprecated use `DeleteChatResponse$inboundSchema` instead. */
    export const inboundSchema = DeleteChatResponse$inboundSchema;
    /** @deprecated use `DeleteChatResponse$outboundSchema` instead. */
    export const outboundSchema = DeleteChatResponse$outboundSchema;
    /** @deprecated use `DeleteChatResponse$Outbound` instead. */
    export type Outbound = DeleteChatResponse$Outbound;
}
