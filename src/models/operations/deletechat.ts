/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type DeleteChatRequest = {
    chatId: string;
};

export type DeleteChatResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    chats?: Array<components.Chat> | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace DeleteChatRequest$ {
    export const inboundSchema: z.ZodType<DeleteChatRequest, z.ZodTypeDef, unknown> = z
        .object({
            chat_id: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                chat_id: "chatId",
            });
        });

    export type Outbound = {
        chat_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteChatRequest> = z
        .object({
            chatId: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                chatId: "chat_id",
            });
        });
}

/** @internal */
export namespace DeleteChatResponse$ {
    export const inboundSchema: z.ZodType<DeleteChatResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Chats: z.array(components.Chat$.inboundSchema).optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Chats: "chats",
                Headers: "headers",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Chats?: Array<components.Chat$.Outbound> | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteChatResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            chats: z.array(components.Chat$.outboundSchema).optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                chats: "Chats",
                headers: "Headers",
            });
        });
}
