/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type PutChatChatIdRequestBody = {
    /**
     * between 1 and 0
     */
    temperature?: number | undefined;
    /**
     * The updated name of the chat
     */
    name?: string | undefined;
    systemMessage?: string | undefined;
};

export type PutChatChatIdRequest = {
    chatId: string;
    requestBody?: PutChatChatIdRequestBody | undefined;
};

/**
 * OK
 */
export type PutChatChatIdResponseBody = {};

export type PutChatChatIdResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    object?: PutChatChatIdResponseBody | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace PutChatChatIdRequestBody$ {
    export const inboundSchema: z.ZodType<PutChatChatIdRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            temperature: z.number().optional(),
            name: z.string().optional(),
            system_message: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.temperature === undefined ? null : { temperature: v.temperature }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.system_message === undefined ? null : { systemMessage: v.system_message }),
            };
        });

    export type Outbound = {
        temperature?: number | undefined;
        name?: string | undefined;
        system_message?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PutChatChatIdRequestBody> = z
        .object({
            temperature: z.number().optional(),
            name: z.string().optional(),
            systemMessage: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.temperature === undefined ? null : { temperature: v.temperature }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.systemMessage === undefined ? null : { system_message: v.systemMessage }),
            };
        });
}

/** @internal */
export namespace PutChatChatIdRequest$ {
    export const inboundSchema: z.ZodType<PutChatChatIdRequest, z.ZodTypeDef, unknown> = z
        .object({
            chat_id: z.string(),
            RequestBody: z.lazy(() => PutChatChatIdRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                chatId: v.chat_id,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        chat_id: string;
        RequestBody?: PutChatChatIdRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PutChatChatIdRequest> = z
        .object({
            chatId: z.string(),
            requestBody: z.lazy(() => PutChatChatIdRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                chat_id: v.chatId,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace PutChatChatIdResponseBody$ {
    export const inboundSchema: z.ZodType<PutChatChatIdResponseBody, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PutChatChatIdResponseBody> =
        z.object({});
}

/** @internal */
export namespace PutChatChatIdResponse$ {
    export const inboundSchema: z.ZodType<PutChatChatIdResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => PutChatChatIdResponseBody$.inboundSchema).optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
                headers: v.Headers,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: PutChatChatIdResponseBody$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PutChatChatIdResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => PutChatChatIdResponseBody$.outboundSchema).optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
                Headers: v.headers,
            };
        });
}
