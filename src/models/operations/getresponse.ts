/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GetResponseRequestBody = {
    /**
     * Id of chat to which you want to send message
     */
    chatThreadId?: string | undefined;
    /**
     * message
     */
    text?: string | undefined;
};

export type GetResponseResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    chatInteractions?: Array<components.ChatInteraction> | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace GetResponseRequestBody$ {
    export const inboundSchema: z.ZodType<GetResponseRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            chat_thread_id: z.string().optional(),
            text: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                chat_thread_id: "chatThreadId",
            });
        });

    export type Outbound = {
        chat_thread_id?: string | undefined;
        text?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetResponseRequestBody> = z
        .object({
            chatThreadId: z.string().optional(),
            text: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                chatThreadId: "chat_thread_id",
            });
        });
}

/** @internal */
export namespace GetResponseResponse$ {
    export const inboundSchema: z.ZodType<GetResponseResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            ChatInteractions: z.array(components.ChatInteraction$.inboundSchema).optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                ChatInteractions: "chatInteractions",
                Headers: "headers",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        ChatInteractions?: Array<components.ChatInteraction$.Outbound> | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetResponseResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            chatInteractions: z.array(components.ChatInteraction$.outboundSchema).optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                chatInteractions: "ChatInteractions",
                headers: "Headers",
            });
        });
}
