/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import { blobLikeSchema } from "../../types";
import * as components from "../components";
import * as z from "zod";

export type FileT = {
    fileName: string;
    content: Uint8Array | string;
};

export type PostDocumentBrainIdFileRequestBody = {
    file?: FileT | Blob | undefined;
};

export type PostDocumentBrainIdFileRequest = {
    brainId: string;
    requestBody?: PostDocumentBrainIdFileRequestBody | undefined;
};

/**
 * OK
 */
export type PostDocumentBrainIdFileResponseBody = {};

export type PostDocumentBrainIdFileResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    object?: PostDocumentBrainIdFileResponseBody | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace FileT$ {
    export const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z
        .object({
            fileName: z.string(),
            content: b64$.zodInbound,
        })
        .transform((v) => {
            return {
                fileName: v.fileName,
                content: v.content,
            };
        });

    export type Outbound = {
        fileName: string;
        content: Uint8Array;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileT> = z
        .object({
            fileName: z.string(),
            content: b64$.zodOutbound,
        })
        .transform((v) => {
            return {
                fileName: v.fileName,
                content: v.content,
            };
        });
}

/** @internal */
export namespace PostDocumentBrainIdFileRequestBody$ {
    export const inboundSchema: z.ZodType<
        PostDocumentBrainIdFileRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            file: z.lazy(() => FileT$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.file === undefined ? null : { file: v.file }),
            };
        });

    export type Outbound = {
        file?: FileT$.Outbound | Blob | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocumentBrainIdFileRequestBody
    > = z
        .object({
            file: z
                .lazy(() => FileT$.outboundSchema)
                .or(blobLikeSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.file === undefined ? null : { file: v.file }),
            };
        });
}

/** @internal */
export namespace PostDocumentBrainIdFileRequest$ {
    export const inboundSchema: z.ZodType<PostDocumentBrainIdFileRequest, z.ZodTypeDef, unknown> = z
        .object({
            brain_id: z.string(),
            RequestBody: z.lazy(() => PostDocumentBrainIdFileRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                brainId: v.brain_id,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        brain_id: string;
        RequestBody?: PostDocumentBrainIdFileRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostDocumentBrainIdFileRequest> =
        z
            .object({
                brainId: z.string(),
                requestBody: z
                    .lazy(() => PostDocumentBrainIdFileRequestBody$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    brain_id: v.brainId,
                    ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                };
            });
}

/** @internal */
export namespace PostDocumentBrainIdFileResponseBody$ {
    export const inboundSchema: z.ZodType<
        PostDocumentBrainIdFileResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocumentBrainIdFileResponseBody
    > = z.object({});
}

/** @internal */
export namespace PostDocumentBrainIdFileResponse$ {
    export const inboundSchema: z.ZodType<PostDocumentBrainIdFileResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                HttpMeta: components.HTTPMetadata$.inboundSchema,
                object: z.lazy(() => PostDocumentBrainIdFileResponseBody$.inboundSchema).optional(),
                Headers: z.record(z.array(z.string())),
            })
            .transform((v) => {
                return {
                    httpMeta: v.HttpMeta,
                    ...(v.object === undefined ? null : { object: v.object }),
                    headers: v.Headers,
                };
            });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: PostDocumentBrainIdFileResponseBody$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocumentBrainIdFileResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => PostDocumentBrainIdFileResponseBody$.outboundSchema).optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
                Headers: v.headers,
            };
        });
}
