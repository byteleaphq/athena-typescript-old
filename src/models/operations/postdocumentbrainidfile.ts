/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type FileT = {
    fileName: string;
    content: Uint8Array | string;
};

export type PostDocumentBrainIdFileRequestBody = {
    file?: FileT | Blob | undefined;
};

export type PostDocumentBrainIdFileRequest = {
    brainId: string;
    requestBody?: PostDocumentBrainIdFileRequestBody | undefined;
};

export type PostDocumentBrainIdFileResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    document?: components.Document | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace FileT$ {
    export const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z.object({
        fileName: z.string(),
        content: b64$.zodInbound,
    });

    export type Outbound = {
        fileName: string;
        content: Uint8Array;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileT> = z.object({
        fileName: z.string(),
        content: b64$.zodOutbound,
    });
}

/** @internal */
export namespace PostDocumentBrainIdFileRequestBody$ {
    export const inboundSchema: z.ZodType<
        PostDocumentBrainIdFileRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        file: z.lazy(() => FileT$.inboundSchema).optional(),
    });

    export type Outbound = {
        file?: FileT$.Outbound | Blob | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocumentBrainIdFileRequestBody
    > = z.object({
        file: z
            .lazy(() => FileT$.outboundSchema)
            .or(blobLikeSchema)
            .optional(),
    });
}

/** @internal */
export namespace PostDocumentBrainIdFileRequest$ {
    export const inboundSchema: z.ZodType<PostDocumentBrainIdFileRequest, z.ZodTypeDef, unknown> = z
        .object({
            brain_id: z.string(),
            RequestBody: z.lazy(() => PostDocumentBrainIdFileRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                brain_id: "brainId",
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        brain_id: string;
        RequestBody?: PostDocumentBrainIdFileRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostDocumentBrainIdFileRequest> =
        z
            .object({
                brainId: z.string(),
                requestBody: z
                    .lazy(() => PostDocumentBrainIdFileRequestBody$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    brainId: "brain_id",
                    requestBody: "RequestBody",
                });
            });
}

/** @internal */
export namespace PostDocumentBrainIdFileResponse$ {
    export const inboundSchema: z.ZodType<PostDocumentBrainIdFileResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                HttpMeta: components.HTTPMetadata$.inboundSchema,
                Document: components.Document$.inboundSchema.optional(),
                Headers: z.record(z.array(z.string())),
            })
            .transform((v) => {
                return remap$(v, {
                    HttpMeta: "httpMeta",
                    Document: "document",
                    Headers: "headers",
                });
            });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Document?: components.Document$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocumentBrainIdFileResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            document: components.Document$.outboundSchema.optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                document: "Document",
                headers: "Headers",
            });
        });
}
