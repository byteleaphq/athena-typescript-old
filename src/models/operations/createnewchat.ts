/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

/**
 * The integration to use for the chat
 */
export enum Integration {
    Files = "files",
    DataWarehouse = "data-warehouse",
}

export type CreateNewChatRequestBody = {
    /**
     * The ID of the brain to associate with the chat
     */
    brainId: string;
    /**
     * The name of the chat
     */
    name: string;
    /**
     * The integration to use for the chat
     */
    integration?: Integration | undefined;
};

export type CreateNewChatResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    chats?: Array<components.Chat> | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace Integration$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Integration> = z.nativeEnum(Integration);
    export const outboundSchema: z.ZodNativeEnum<typeof Integration> = inboundSchema;
}

/** @internal */
export namespace CreateNewChatRequestBody$ {
    export const inboundSchema: z.ZodType<CreateNewChatRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            brain_id: z.string(),
            name: z.string(),
            integration: Integration$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                brain_id: "brainId",
            });
        });

    export type Outbound = {
        brain_id: string;
        name: string;
        integration?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateNewChatRequestBody> = z
        .object({
            brainId: z.string(),
            name: z.string(),
            integration: Integration$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                brainId: "brain_id",
            });
        });
}

/** @internal */
export namespace CreateNewChatResponse$ {
    export const inboundSchema: z.ZodType<CreateNewChatResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Chats: z.array(components.Chat$.inboundSchema).optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Chats: "chats",
                Headers: "headers",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Chats?: Array<components.Chat$.Outbound> | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateNewChatResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            chats: z.array(components.Chat$.outboundSchema).optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                chats: "Chats",
                headers: "Headers",
            });
        });
}
