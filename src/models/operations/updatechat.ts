/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$ } from "../../lib/schemas.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type UpdateChatRequestBody = {
    /**
     * between 1 and 0
     */
    temperature?: number | null | undefined;
    /**
     * The updated name of the chat
     */
    name?: string | null | undefined;
    systemMessage?: string | null | undefined;
    additionalProperties: { [k: string]: any };
};

export type UpdateChatRequest = {
    chatId: string;
    requestBody?: UpdateChatRequestBody | undefined;
};

export type UpdateChatResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    chats?: Array<components.Chat> | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace UpdateChatRequestBody$ {
    export const inboundSchema: z.ZodType<UpdateChatRequestBody, z.ZodTypeDef, unknown> =
        collectExtraKeys$(
            z
                .object({
                    temperature: z.nullable(z.number()).optional(),
                    name: z.nullable(z.string()).optional(),
                    system_message: z.nullable(z.string()).optional(),
                })
                .catchall(z.any()),
            "additionalProperties"
        ).transform((v) => {
            return remap$(v, {
                system_message: "systemMessage",
            });
        });

    export type Outbound = {
        temperature?: number | null | undefined;
        name?: string | null | undefined;
        system_message?: string | null | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateChatRequestBody> = z
        .object({
            temperature: z.nullable(z.number()).optional(),
            name: z.nullable(z.string()).optional(),
            systemMessage: z.nullable(z.string()).optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...remap$(v, {
                    systemMessage: "system_message",
                    additionalProperties: null,
                }),
            };
        });
}

/** @internal */
export namespace UpdateChatRequest$ {
    export const inboundSchema: z.ZodType<UpdateChatRequest, z.ZodTypeDef, unknown> = z
        .object({
            chat_id: z.string(),
            RequestBody: z.lazy(() => UpdateChatRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                chat_id: "chatId",
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        chat_id: string;
        RequestBody?: UpdateChatRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateChatRequest> = z
        .object({
            chatId: z.string(),
            requestBody: z.lazy(() => UpdateChatRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                chatId: "chat_id",
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace UpdateChatResponse$ {
    export const inboundSchema: z.ZodType<UpdateChatResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Chats: z.array(components.Chat$.inboundSchema).optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Chats: "chats",
                Headers: "headers",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Chats?: Array<components.Chat$.Outbound> | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateChatResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            chats: z.array(components.Chat$.outboundSchema).optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                chats: "Chats",
                headers: "Headers",
            });
        });
}
