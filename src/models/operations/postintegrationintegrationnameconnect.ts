/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type PostIntegrationIntegrationNameConnectRequest = {
    /**
     * Currently supported integrations are "notion" and "confluence". More integrations will be added in the future.
     */
    integrationName: string;
};

/**
 * OK
 */
export type PostIntegrationIntegrationNameConnectResponseBody = {
    /**
     * URL to connect to the integration
     */
    url?: string | undefined;
};

export type PostIntegrationIntegrationNameConnectResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    object?: PostIntegrationIntegrationNameConnectResponseBody | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace PostIntegrationIntegrationNameConnectRequest$ {
    export const inboundSchema: z.ZodType<
        PostIntegrationIntegrationNameConnectRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            integration_name: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                integration_name: "integrationName",
            });
        });

    export type Outbound = {
        integration_name: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostIntegrationIntegrationNameConnectRequest
    > = z
        .object({
            integrationName: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                integrationName: "integration_name",
            });
        });
}

/** @internal */
export namespace PostIntegrationIntegrationNameConnectResponseBody$ {
    export const inboundSchema: z.ZodType<
        PostIntegrationIntegrationNameConnectResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        url: z.string().optional(),
    });

    export type Outbound = {
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostIntegrationIntegrationNameConnectResponseBody
    > = z.object({
        url: z.string().optional(),
    });
}

/** @internal */
export namespace PostIntegrationIntegrationNameConnectResponse$ {
    export const inboundSchema: z.ZodType<
        PostIntegrationIntegrationNameConnectResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z
                .lazy(() => PostIntegrationIntegrationNameConnectResponseBody$.inboundSchema)
                .optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Headers: "headers",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: PostIntegrationIntegrationNameConnectResponseBody$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostIntegrationIntegrationNameConnectResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z
                .lazy(() => PostIntegrationIntegrationNameConnectResponseBody$.outboundSchema)
                .optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                headers: "Headers",
            });
        });
}
