/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type PostIntegrationIntegrationNameConnectRequest = {
    /**
     * Currently supported integrations are "notion" and "confluence". More integrations will be added in the future.
     */
    integrationName: string;
};

/**
 * OK
 */
export type PostIntegrationIntegrationNameConnectResponseBody = {
    /**
     * URL to connect to the integration
     */
    url?: string | undefined;
};

export type PostIntegrationIntegrationNameConnectResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    object?: PostIntegrationIntegrationNameConnectResponseBody | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export const PostIntegrationIntegrationNameConnectRequest$inboundSchema: z.ZodType<
    PostIntegrationIntegrationNameConnectRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        integration_name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            integration_name: "integrationName",
        });
    });

/** @internal */
export type PostIntegrationIntegrationNameConnectRequest$Outbound = {
    integration_name: string;
};

/** @internal */
export const PostIntegrationIntegrationNameConnectRequest$outboundSchema: z.ZodType<
    PostIntegrationIntegrationNameConnectRequest$Outbound,
    z.ZodTypeDef,
    PostIntegrationIntegrationNameConnectRequest
> = z
    .object({
        integrationName: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            integrationName: "integration_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostIntegrationIntegrationNameConnectRequest$ {
    /** @deprecated use `PostIntegrationIntegrationNameConnectRequest$inboundSchema` instead. */
    export const inboundSchema = PostIntegrationIntegrationNameConnectRequest$inboundSchema;
    /** @deprecated use `PostIntegrationIntegrationNameConnectRequest$outboundSchema` instead. */
    export const outboundSchema = PostIntegrationIntegrationNameConnectRequest$outboundSchema;
    /** @deprecated use `PostIntegrationIntegrationNameConnectRequest$Outbound` instead. */
    export type Outbound = PostIntegrationIntegrationNameConnectRequest$Outbound;
}

/** @internal */
export const PostIntegrationIntegrationNameConnectResponseBody$inboundSchema: z.ZodType<
    PostIntegrationIntegrationNameConnectResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    url: z.string().optional(),
});

/** @internal */
export type PostIntegrationIntegrationNameConnectResponseBody$Outbound = {
    url?: string | undefined;
};

/** @internal */
export const PostIntegrationIntegrationNameConnectResponseBody$outboundSchema: z.ZodType<
    PostIntegrationIntegrationNameConnectResponseBody$Outbound,
    z.ZodTypeDef,
    PostIntegrationIntegrationNameConnectResponseBody
> = z.object({
    url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostIntegrationIntegrationNameConnectResponseBody$ {
    /** @deprecated use `PostIntegrationIntegrationNameConnectResponseBody$inboundSchema` instead. */
    export const inboundSchema = PostIntegrationIntegrationNameConnectResponseBody$inboundSchema;
    /** @deprecated use `PostIntegrationIntegrationNameConnectResponseBody$outboundSchema` instead. */
    export const outboundSchema = PostIntegrationIntegrationNameConnectResponseBody$outboundSchema;
    /** @deprecated use `PostIntegrationIntegrationNameConnectResponseBody$Outbound` instead. */
    export type Outbound = PostIntegrationIntegrationNameConnectResponseBody$Outbound;
}

/** @internal */
export const PostIntegrationIntegrationNameConnectResponse$inboundSchema: z.ZodType<
    PostIntegrationIntegrationNameConnectResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        object: z
            .lazy(() => PostIntegrationIntegrationNameConnectResponseBody$inboundSchema)
            .optional(),
        Headers: z.record(z.array(z.string())),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
            Headers: "headers",
        });
    });

/** @internal */
export type PostIntegrationIntegrationNameConnectResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    object?: PostIntegrationIntegrationNameConnectResponseBody$Outbound | undefined;
    Headers: { [k: string]: Array<string> };
};

/** @internal */
export const PostIntegrationIntegrationNameConnectResponse$outboundSchema: z.ZodType<
    PostIntegrationIntegrationNameConnectResponse$Outbound,
    z.ZodTypeDef,
    PostIntegrationIntegrationNameConnectResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        object: z
            .lazy(() => PostIntegrationIntegrationNameConnectResponseBody$outboundSchema)
            .optional(),
        headers: z.record(z.array(z.string())),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
            headers: "Headers",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostIntegrationIntegrationNameConnectResponse$ {
    /** @deprecated use `PostIntegrationIntegrationNameConnectResponse$inboundSchema` instead. */
    export const inboundSchema = PostIntegrationIntegrationNameConnectResponse$inboundSchema;
    /** @deprecated use `PostIntegrationIntegrationNameConnectResponse$outboundSchema` instead. */
    export const outboundSchema = PostIntegrationIntegrationNameConnectResponse$outboundSchema;
    /** @deprecated use `PostIntegrationIntegrationNameConnectResponse$Outbound` instead. */
    export type Outbound = PostIntegrationIntegrationNameConnectResponse$Outbound;
}
