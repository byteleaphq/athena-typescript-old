/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetDocumentBrainIdRequest = {
    brainId: string;
};

export type GetDocumentBrainIdResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    documents?: Array<components.Document> | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace GetDocumentBrainIdRequest$ {
    export const inboundSchema: z.ZodType<GetDocumentBrainIdRequest, z.ZodTypeDef, unknown> = z
        .object({
            brain_id: z.string(),
        })
        .transform((v) => {
            return {
                brainId: v.brain_id,
            };
        });

    export type Outbound = {
        brain_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDocumentBrainIdRequest> = z
        .object({
            brainId: z.string(),
        })
        .transform((v) => {
            return {
                brain_id: v.brainId,
            };
        });
}

/** @internal */
export namespace GetDocumentBrainIdResponse$ {
    export const inboundSchema: z.ZodType<GetDocumentBrainIdResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Documents: z.array(components.Document$.inboundSchema).optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Documents === undefined ? null : { documents: v.Documents }),
                headers: v.Headers,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Documents?: Array<components.Document$.Outbound> | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDocumentBrainIdResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            documents: z.array(components.Document$.outboundSchema).optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.documents === undefined ? null : { Documents: v.documents }),
                Headers: v.headers,
            };
        });
}
