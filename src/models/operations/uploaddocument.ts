/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type FileT = {
    fileName: string;
    content: Uint8Array | string;
};

export type UploadDocumentRequestBody = {
    file?: FileT | Blob | undefined;
};

export type UploadDocumentRequest = {
    /**
     * The ID of the knowledge base to which the document belongs
     */
    brainId: string;
    requestBody?: UploadDocumentRequestBody | undefined;
};

export type UploadDocumentResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    document?: components.Document | undefined;
};

/** @internal */
export namespace FileT$ {
    export const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z.object({
        fileName: z.string(),
        content: b64$.zodInbound,
    });

    export type Outbound = {
        fileName: string;
        content: Uint8Array;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileT> = z.object({
        fileName: z.string(),
        content: b64$.zodOutbound,
    });
}

/** @internal */
export namespace UploadDocumentRequestBody$ {
    export const inboundSchema: z.ZodType<UploadDocumentRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            file: z.lazy(() => FileT$.inboundSchema).optional(),
        });

    export type Outbound = {
        file?: FileT$.Outbound | Blob | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadDocumentRequestBody> =
        z.object({
            file: z
                .lazy(() => FileT$.outboundSchema)
                .or(blobLikeSchema)
                .optional(),
        });
}

/** @internal */
export namespace UploadDocumentRequest$ {
    export const inboundSchema: z.ZodType<UploadDocumentRequest, z.ZodTypeDef, unknown> = z
        .object({
            brain_id: z.string(),
            RequestBody: z.lazy(() => UploadDocumentRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                brain_id: "brainId",
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        brain_id: string;
        RequestBody?: UploadDocumentRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadDocumentRequest> = z
        .object({
            brainId: z.string(),
            requestBody: z.lazy(() => UploadDocumentRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                brainId: "brain_id",
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace UploadDocumentResponse$ {
    export const inboundSchema: z.ZodType<UploadDocumentResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Document: components.Document$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Document: "document",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Document?: components.Document$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadDocumentResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            document: components.Document$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                document: "Document",
            });
        });
}
