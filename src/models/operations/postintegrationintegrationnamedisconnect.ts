/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type PostIntegrationIntegrationNameDisconnectRequest = {
    /**
     * Currently supported integrations are "notion" and "confluence". More integrations will be added in the future.
     */
    integrationName: string;
};

/**
 * Empty object
 */
export type PostIntegrationIntegrationNameDisconnectResponseBody = {};

export type PostIntegrationIntegrationNameDisconnectResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful response
     */
    object?: PostIntegrationIntegrationNameDisconnectResponseBody | undefined;
};

/** @internal */
export namespace PostIntegrationIntegrationNameDisconnectRequest$ {
    export const inboundSchema: z.ZodType<
        PostIntegrationIntegrationNameDisconnectRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            integration_name: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                integration_name: "integrationName",
            });
        });

    export type Outbound = {
        integration_name: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostIntegrationIntegrationNameDisconnectRequest
    > = z
        .object({
            integrationName: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                integrationName: "integration_name",
            });
        });
}

/** @internal */
export namespace PostIntegrationIntegrationNameDisconnectResponseBody$ {
    export const inboundSchema: z.ZodType<
        PostIntegrationIntegrationNameDisconnectResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostIntegrationIntegrationNameDisconnectResponseBody
    > = z.object({});
}

/** @internal */
export namespace PostIntegrationIntegrationNameDisconnectResponse$ {
    export const inboundSchema: z.ZodType<
        PostIntegrationIntegrationNameDisconnectResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z
                .lazy(() => PostIntegrationIntegrationNameDisconnectResponseBody$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: PostIntegrationIntegrationNameDisconnectResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostIntegrationIntegrationNameDisconnectResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z
                .lazy(() => PostIntegrationIntegrationNameDisconnectResponseBody$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
            });
        });
}
