/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type PostDocumentBrainIdUrlRequestBody = {
    /**
     * Url of the website that you want to add
     */
    url?: string | undefined;
};

export type PostDocumentBrainIdUrlRequest = {
    brainId: string;
    requestBody?: PostDocumentBrainIdUrlRequestBody | undefined;
};

export type PostDocumentBrainIdUrlResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    document?: components.Document | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace PostDocumentBrainIdUrlRequestBody$ {
    export const inboundSchema: z.ZodType<
        PostDocumentBrainIdUrlRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostDocumentBrainIdUrlRequestBody
    > = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace PostDocumentBrainIdUrlRequest$ {
    export const inboundSchema: z.ZodType<PostDocumentBrainIdUrlRequest, z.ZodTypeDef, unknown> = z
        .object({
            brain_id: z.string(),
            RequestBody: z.lazy(() => PostDocumentBrainIdUrlRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                brainId: v.brain_id,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        brain_id: string;
        RequestBody?: PostDocumentBrainIdUrlRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostDocumentBrainIdUrlRequest> =
        z
            .object({
                brainId: z.string(),
                requestBody: z
                    .lazy(() => PostDocumentBrainIdUrlRequestBody$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    brain_id: v.brainId,
                    ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                };
            });
}

/** @internal */
export namespace PostDocumentBrainIdUrlResponse$ {
    export const inboundSchema: z.ZodType<PostDocumentBrainIdUrlResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Document: components.Document$.inboundSchema.optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Document === undefined ? null : { document: v.Document }),
                headers: v.Headers,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Document?: components.Document$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostDocumentBrainIdUrlResponse> =
        z
            .object({
                httpMeta: components.HTTPMetadata$.outboundSchema,
                document: components.Document$.outboundSchema.optional(),
                headers: z.record(z.array(z.string())),
            })
            .transform((v) => {
                return {
                    HttpMeta: v.httpMeta,
                    ...(v.document === undefined ? null : { Document: v.document }),
                    Headers: v.headers,
                };
            });
}
