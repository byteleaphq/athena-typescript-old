/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetIntegrationIntegrationNameConnectRequest = {
    /**
     * Currently supported integrations are "notion" and "confluence". More integrations will be added in the future.
     */
    integrationName: string;
};

/**
 * OK
 */
export type GetIntegrationIntegrationNameConnectResponseBody = {
    /**
     * URL to connect to the integration
     */
    url?: string | undefined;
};

export type GetIntegrationIntegrationNameConnectResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    object?: GetIntegrationIntegrationNameConnectResponseBody | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace GetIntegrationIntegrationNameConnectRequest$ {
    export const inboundSchema: z.ZodType<
        GetIntegrationIntegrationNameConnectRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            integration_name: z.string(),
        })
        .transform((v) => {
            return {
                integrationName: v.integration_name,
            };
        });

    export type Outbound = {
        integration_name: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetIntegrationIntegrationNameConnectRequest
    > = z
        .object({
            integrationName: z.string(),
        })
        .transform((v) => {
            return {
                integration_name: v.integrationName,
            };
        });
}

/** @internal */
export namespace GetIntegrationIntegrationNameConnectResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetIntegrationIntegrationNameConnectResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetIntegrationIntegrationNameConnectResponseBody
    > = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace GetIntegrationIntegrationNameConnectResponse$ {
    export const inboundSchema: z.ZodType<
        GetIntegrationIntegrationNameConnectResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z
                .lazy(() => GetIntegrationIntegrationNameConnectResponseBody$.inboundSchema)
                .optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
                headers: v.Headers,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: GetIntegrationIntegrationNameConnectResponseBody$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetIntegrationIntegrationNameConnectResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z
                .lazy(() => GetIntegrationIntegrationNameConnectResponseBody$.outboundSchema)
                .optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
                Headers: v.headers,
            };
        });
}
