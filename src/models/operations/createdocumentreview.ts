/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export enum ReviewModel {
    Gpt35Turbo = "gpt-3.5-turbo",
    Claude3Haiku = "claude-3-haiku",
}

export enum FinalModel {
    Gpt35Turbo = "gpt-3.5-turbo",
    Gpt4 = "gpt-4",
    ClaudeInstant1 = "claude-instant-1",
    Claude2 = "claude-2",
    Claude3Haiku = "claude-3-haiku",
    Claude3Sonnet = "claude-3-sonnet",
    Claude3Opus = "claude-3-opus",
    Mixtral = "mixtral",
    MistralSmall = "mistral-small",
    MistralMedium = "mistral-medium",
    MistralLarge = "mistral-large",
}

export type CreateDocumentReviewRequestBody = {
    message?: string | undefined;
    brainId?: string | undefined;
    documentId?: string | undefined;
    reviewModel?: ReviewModel | undefined;
    finalModel?: FinalModel | undefined;
    activeReadingInstructions?: string | undefined;
};

export type CreateDocumentReviewResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful creation of document review
     */
    documentReview?: components.DocumentReview | undefined;
};

/** @internal */
export const ReviewModel$inboundSchema: z.ZodNativeEnum<typeof ReviewModel> =
    z.nativeEnum(ReviewModel);

/** @internal */
export const ReviewModel$outboundSchema: z.ZodNativeEnum<typeof ReviewModel> =
    ReviewModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReviewModel$ {
    /** @deprecated use `ReviewModel$inboundSchema` instead. */
    export const inboundSchema = ReviewModel$inboundSchema;
    /** @deprecated use `ReviewModel$outboundSchema` instead. */
    export const outboundSchema = ReviewModel$outboundSchema;
}

/** @internal */
export const FinalModel$inboundSchema: z.ZodNativeEnum<typeof FinalModel> =
    z.nativeEnum(FinalModel);

/** @internal */
export const FinalModel$outboundSchema: z.ZodNativeEnum<typeof FinalModel> =
    FinalModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FinalModel$ {
    /** @deprecated use `FinalModel$inboundSchema` instead. */
    export const inboundSchema = FinalModel$inboundSchema;
    /** @deprecated use `FinalModel$outboundSchema` instead. */
    export const outboundSchema = FinalModel$outboundSchema;
}

/** @internal */
export const CreateDocumentReviewRequestBody$inboundSchema: z.ZodType<
    CreateDocumentReviewRequestBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        message: z.string().optional(),
        brain_id: z.string().optional(),
        document_id: z.string().optional(),
        review_model: ReviewModel$inboundSchema.optional(),
        final_model: FinalModel$inboundSchema.optional(),
        active_reading_instructions: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            brain_id: "brainId",
            document_id: "documentId",
            review_model: "reviewModel",
            final_model: "finalModel",
            active_reading_instructions: "activeReadingInstructions",
        });
    });

/** @internal */
export type CreateDocumentReviewRequestBody$Outbound = {
    message?: string | undefined;
    brain_id?: string | undefined;
    document_id?: string | undefined;
    review_model?: string | undefined;
    final_model?: string | undefined;
    active_reading_instructions?: string | undefined;
};

/** @internal */
export const CreateDocumentReviewRequestBody$outboundSchema: z.ZodType<
    CreateDocumentReviewRequestBody$Outbound,
    z.ZodTypeDef,
    CreateDocumentReviewRequestBody
> = z
    .object({
        message: z.string().optional(),
        brainId: z.string().optional(),
        documentId: z.string().optional(),
        reviewModel: ReviewModel$outboundSchema.optional(),
        finalModel: FinalModel$outboundSchema.optional(),
        activeReadingInstructions: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            brainId: "brain_id",
            documentId: "document_id",
            reviewModel: "review_model",
            finalModel: "final_model",
            activeReadingInstructions: "active_reading_instructions",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDocumentReviewRequestBody$ {
    /** @deprecated use `CreateDocumentReviewRequestBody$inboundSchema` instead. */
    export const inboundSchema = CreateDocumentReviewRequestBody$inboundSchema;
    /** @deprecated use `CreateDocumentReviewRequestBody$outboundSchema` instead. */
    export const outboundSchema = CreateDocumentReviewRequestBody$outboundSchema;
    /** @deprecated use `CreateDocumentReviewRequestBody$Outbound` instead. */
    export type Outbound = CreateDocumentReviewRequestBody$Outbound;
}

/** @internal */
export const CreateDocumentReviewResponse$inboundSchema: z.ZodType<
    CreateDocumentReviewResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        DocumentReview: components.DocumentReview$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
            DocumentReview: "documentReview",
        });
    });

/** @internal */
export type CreateDocumentReviewResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    DocumentReview?: components.DocumentReview$Outbound | undefined;
};

/** @internal */
export const CreateDocumentReviewResponse$outboundSchema: z.ZodType<
    CreateDocumentReviewResponse$Outbound,
    z.ZodTypeDef,
    CreateDocumentReviewResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        documentReview: components.DocumentReview$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
            documentReview: "DocumentReview",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDocumentReviewResponse$ {
    /** @deprecated use `CreateDocumentReviewResponse$inboundSchema` instead. */
    export const inboundSchema = CreateDocumentReviewResponse$inboundSchema;
    /** @deprecated use `CreateDocumentReviewResponse$outboundSchema` instead. */
    export const outboundSchema = CreateDocumentReviewResponse$outboundSchema;
    /** @deprecated use `CreateDocumentReviewResponse$Outbound` instead. */
    export type Outbound = CreateDocumentReviewResponse$Outbound;
}
