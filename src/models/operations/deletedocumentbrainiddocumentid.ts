/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type DeleteDocumentBrainIdDocumentIdRequest = {
    brainId: string;
    documentId: string;
};

export type DeleteDocumentBrainIdDocumentIdResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    deleteResponse?: components.DeleteResponse | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace DeleteDocumentBrainIdDocumentIdRequest$ {
    export const inboundSchema: z.ZodType<
        DeleteDocumentBrainIdDocumentIdRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            brain_id: z.string(),
            document_id: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                brain_id: "brainId",
                document_id: "documentId",
            });
        });

    export type Outbound = {
        brain_id: string;
        document_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteDocumentBrainIdDocumentIdRequest
    > = z
        .object({
            brainId: z.string(),
            documentId: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                brainId: "brain_id",
                documentId: "document_id",
            });
        });
}

/** @internal */
export namespace DeleteDocumentBrainIdDocumentIdResponse$ {
    export const inboundSchema: z.ZodType<
        DeleteDocumentBrainIdDocumentIdResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            DeleteResponse: components.DeleteResponse$.inboundSchema.optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                DeleteResponse: "deleteResponse",
                Headers: "headers",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        DeleteResponse?: components.DeleteResponse$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteDocumentBrainIdDocumentIdResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            deleteResponse: components.DeleteResponse$.outboundSchema.optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                deleteResponse: "DeleteResponse",
                headers: "Headers",
            });
        });
}
