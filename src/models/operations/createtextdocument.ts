/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type CreateTextDocumentRequestBody = {
    /**
     * Text that is to be added to the brain
     */
    content?: string | undefined;
};

export type CreateTextDocumentRequest = {
    brainId: string;
    requestBody?: CreateTextDocumentRequestBody | undefined;
};

export type CreateTextDocumentResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    document?: components.Document | undefined;
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace CreateTextDocumentRequestBody$ {
    export const inboundSchema: z.ZodType<CreateTextDocumentRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            content: z.string().optional(),
        });

    export type Outbound = {
        content?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTextDocumentRequestBody> =
        z.object({
            content: z.string().optional(),
        });
}

/** @internal */
export namespace CreateTextDocumentRequest$ {
    export const inboundSchema: z.ZodType<CreateTextDocumentRequest, z.ZodTypeDef, unknown> = z
        .object({
            brain_id: z.string(),
            RequestBody: z.lazy(() => CreateTextDocumentRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                brain_id: "brainId",
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        brain_id: string;
        RequestBody?: CreateTextDocumentRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTextDocumentRequest> = z
        .object({
            brainId: z.string(),
            requestBody: z.lazy(() => CreateTextDocumentRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                brainId: "brain_id",
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace CreateTextDocumentResponse$ {
    export const inboundSchema: z.ZodType<CreateTextDocumentResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Document: components.Document$.inboundSchema.optional(),
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Document: "document",
                Headers: "headers",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Document?: components.Document$.Outbound | undefined;
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTextDocumentResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            document: components.Document$.outboundSchema.optional(),
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                document: "Document",
                headers: "Headers",
            });
        });
}
