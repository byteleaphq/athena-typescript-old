/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type SearchDocumentsRequest = {
    /**
     * Optional search query to filter documents
     */
    searchQuery?: string | undefined;
    /**
     * ID of the brain to search in
     */
    brainId: string;
};

export type SearchDocumentsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful search operation
     */
    documents?: Array<components.Document> | undefined;
};

/** @internal */
export const SearchDocumentsRequest$inboundSchema: z.ZodType<
    SearchDocumentsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        search_query: z.string().optional(),
        brain_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            search_query: "searchQuery",
            brain_id: "brainId",
        });
    });

/** @internal */
export type SearchDocumentsRequest$Outbound = {
    search_query?: string | undefined;
    brain_id: string;
};

/** @internal */
export const SearchDocumentsRequest$outboundSchema: z.ZodType<
    SearchDocumentsRequest$Outbound,
    z.ZodTypeDef,
    SearchDocumentsRequest
> = z
    .object({
        searchQuery: z.string().optional(),
        brainId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            searchQuery: "search_query",
            brainId: "brain_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchDocumentsRequest$ {
    /** @deprecated use `SearchDocumentsRequest$inboundSchema` instead. */
    export const inboundSchema = SearchDocumentsRequest$inboundSchema;
    /** @deprecated use `SearchDocumentsRequest$outboundSchema` instead. */
    export const outboundSchema = SearchDocumentsRequest$outboundSchema;
    /** @deprecated use `SearchDocumentsRequest$Outbound` instead. */
    export type Outbound = SearchDocumentsRequest$Outbound;
}

/** @internal */
export const SearchDocumentsResponse$inboundSchema: z.ZodType<
    SearchDocumentsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        Documents: z.array(components.Document$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
            Documents: "documents",
        });
    });

/** @internal */
export type SearchDocumentsResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    Documents?: Array<components.Document$Outbound> | undefined;
};

/** @internal */
export const SearchDocumentsResponse$outboundSchema: z.ZodType<
    SearchDocumentsResponse$Outbound,
    z.ZodTypeDef,
    SearchDocumentsResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        documents: z.array(components.Document$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
            documents: "Documents",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchDocumentsResponse$ {
    /** @deprecated use `SearchDocumentsResponse$inboundSchema` instead. */
    export const inboundSchema = SearchDocumentsResponse$inboundSchema;
    /** @deprecated use `SearchDocumentsResponse$outboundSchema` instead. */
    export const outboundSchema = SearchDocumentsResponse$outboundSchema;
    /** @deprecated use `SearchDocumentsResponse$Outbound` instead. */
    export type Outbound = SearchDocumentsResponse$Outbound;
}
